module desugar/functions

imports
  signatures/functions-sig
  signatures/libraries-sig
  signatures/statements-sig
  signatures/modifiers-sig
  signatures/types-sig
  
  desugar/contracts
  desugar/solidity
  
  libspoofax/stratego/debug

signature
  constructors
    Function             : String * List(Param) * List(ModifiersFun) * List(ReturnParam) * Statement -> Function
  
    Constructor          : String * List(Param) * ConsMod * Statement -> Function
    ConstructorWithSuper : String * List(Param) * Option(ConsMod) * String * List(Exp) * Statement -> Function
    
    //Add function name to return statements
    VoidReturn      : String       -> ReturnStatement
    ReturnStatement : String * Exp -> ReturnStatement
    
    //Add void type for functions
    VoidType  : Type
    
    //Add tuple type as return type for functions
    TupleType : List(Type) -> Type

strategies
  /**
   * Normalizes all constructors into a generic format:
   *   Constructor(name, params, mod?, statement)
   *   ConstructorWithSuper(name, params, mod?, super, superCall, statement)
   *
   * This function adds a default constructor if no constructor exists yet.
   */
  normalize-constructors = topdown(try(normalize-constructors-pre))
  
  /**
   * Normalizes functions into a generic format:
   *   Function(name, params, modifiers, returnParams, statement)
   *
   * Also adds the name of the function to each return statement.
   * This information is used during typechecking.
   */
  normalize-functions = topdown(try(normalize-fun))

rules
  //-----------------------------------------------------------------------------------------------
  //Helper functions
  /**
   * Fixes constructor modifiers.
   *
   * @param list
   * @return list
   */
  fix-constructor-modifiers: (mod1, mod2) -> mod
    where
    (
      (<?None()> mod1; tmod := mod2) <+ //First modifier is absent
      (<?None()> mod2; tmod := mod1) <+ //Second modifier is absent
      (tmod := InvalidMod("You can only specify one modifier"))
    );
    //Unpack the Some
    (
      (<?Some(mod)> tmod) <+
      (<?None()> tmod; mod := NoModifier()) <+
      (mod := tmod)
    )
  
  /**
   * Fixes function modifiers.
   *
   * @param list
   * @return list
   */
  fix-function-modifiers: [] -> []
  fix-function-modifiers: mods -> <concat> [invalid, statemut', visibility']
    where
    statemut := <get-statemut-modifiers> mods;
    visibility := <get-visibility-modifiers> mods;
    invalid := <get-invalid-modifiers> mods;
    (
      (<gti> (<length> statemut, 1);
      statemut' := [InvalidMod("You can only have one state mutability modifier.")]) <+
      statemut' := statemut
    );
    (
      (<gti> (<length> visibility, 1);
      visibility' := [InvalidMod("You can only have one visibility modifier.")]) <+
      visibility' := visibility
    )
  
  get-statemut-modifiers:   [] -> []
  get-statemut-modifiers:   [StateMutability("constant") | tail] -> [StateMutability("view") | <get-statemut-modifiers> tail]
  get-statemut-modifiers:   [s@StateMutability(_)        | tail] -> [s | <get-statemut-modifiers> tail]
  get-statemut-modifiers:   [_                           | tail] -> <get-statemut-modifiers> tail
  
  get-visibility-modifiers: [] -> []
  get-visibility-modifiers: [v@Visibility(_) | tail] -> [v | <get-visibility-modifiers> tail]
  get-visibility-modifiers: [_               | tail] -> <get-visibility-modifiers> tail
  
  get-invalid-modifiers: [] -> []
  get-invalid-modifiers: [i@InvalidMod(_) | tail] -> [i | <get-invalid-modifiers> tail]
  get-invalid-modifiers: [_               | tail] -> <get-invalid-modifiers> tail
  
  /**
   * Converts an array of return types into a single return type (Void, type or tuple).
   */
  convert-return-type: []     -> VoidType()
  convert-return-type: [type] -> type
  convert-return-type: types  -> TupleType(types)

  //-----------------------------------------------------------------------------------------------
  /**
   * Adds the name of the contract/library to all the constructors in it.
   */
  normalize-constructors-pre: Contract(name, inherits, content) -> Contract(name, inherits, content')
    where
    content' := <add-constructor(|name)> <map(normalize-constructor(|name))> content
  normalize-constructors-pre: Library(name, content) -> Library(name, content')
    where
    content' := <add-constructor(|name)> <map(normalize-constructor(|name))> content
  
  /**
   * Normalizes all constructors and adds the name of the contract to the constructor.
   *
   * If a function is encountered with the given name (old constructor syntax), then it is converted
   * to a constructor. If this constructor function specifies a return type or state mutability,
   * then this method will use InvalidMod to display an error to the user.
   */
  normalize-constructor(|contractName): Constructor(params, mod, body)
                                        -> Constructor(contractName, params, mod, body)
  normalize-constructor(|contractName): ConstructorWithSuper(params, mod1, modCon, mod2, body)
                                        -> ConstructorWithSuper(contractName, params, mod1, modCon, mod2, body)
  normalize-constructor(|contractName): VoidFunction(contractName, params, mods, body)
                                        -> Constructor(contractName, params, mod, body)
    where
    mods' := <fix-function-modifiers> mods;
    if (<gti> (<length> <get-statemut-modifiers> mods', 0))
    then mod := InvalidMod("Constructor can only have a visibility modifier.")
    else if (<?[]> mods')
    then mod := NoModifier()
    else mod := <Hd> mods'
    end
    end
  normalize-constructor(|contractName): Function(contractName, params, _, ret, body)
                                        -> Function(contractName, params, mod, ret, body)
    where
    mod := [InvalidMod("A constructor (function with contract name) cannot have a return type.")]

  normalize-constructor(|contractName): x -> x
  
  /**
   * If the given list of contract content does not include a constructor, this function adds 
   * an empty constructor.
   *
   * @param  string                - the name of the contract
   * @param  list(ContractContent)
   * @return list(ContractContent) 
   */
  add-constructor(|name): content -> content'
    where
    if (<has-no-constructor> content)
    then content' := [Constructor(name, [], Visibility("public"), []) | content]
    else content' := content
    end
  
  /**
   * Succeeds if the given contract content does not include a constructor.
   *
   * @param  list(ContractContent)
   * @return list(ContractContent)
   */
  has-no-constructor = map(not-constructor)
  
  /**
   * Succeeds if the given element is not a constructor.
   */
  not-constructor: c -> c
    where
    not(<?Constructor(_, _, _, _) + ?ConstructorWithSuper(_, _, _, _, _, _)> c)
  
  //-----------------------------------------------------------------------------------------------
  //Unpack returns for abstract functions
  normalize-fun: AbstractFunction(name, params, mods, Some(Returns(retParams)))
                 -> AbstractFunction(name, params, mods', retParams')
    where
    mods' := <fix-function-modifiers> mods;
    retParams' := <convert-return-type> retParams
  normalize-fun: AbstractFunction(name, params, mods, None())
                 -> AbstractFunction(name, params, mods', VoidType())
    where
    mods' := <fix-function-modifiers> mods
  
  /**
   * Normalize functions
   * - Return params are unpacked (Returns(x) -> x)
   * - Body is wrapped in a block
   * - Fallback is turned into a function named "*fallback"
   * - Fixes super constructor modifiers
   */
  normalize-fun: Function(name, params, mods, Returns(retParams), body) -> Function(name, params, mods', retParams', body')
    where
    body' := Block(<innermost(add-function-name-to-return(|name))> body);
    mods' := <fix-function-modifiers> mods;
    retParams' := <convert-return-type> retParams
  normalize-fun: VoidFunction(name, params, mods, body) -> Function(name, params, mods', VoidType(), body')
    where
    body' := Block(<innermost(add-function-name-to-return(|name))> body);
    mods' := <fix-function-modifiers> mods
  normalize-fun: FallBackFunction(mods, body) -> Function(name, [], mods', VoidType(), body')
    where
    name := "*fallback";
    body' := Block(<innermost(add-function-name-to-return(|name))> body);
    mods' := <fix-function-modifiers> mods
  
  //For constuctors, only do the block / modifier fix. Return statements are allowed in the constructor.
  normalize-fun: Constructor(name, params, mod, body) -> Constructor(name, params, mod', Block(body))
    where
    <?Some(mod')> mod <+ mod' := NoModifier()
  normalize-fun: ConstructorWithSuper(name, params, mod1, ModSuperCall(superName, superCall), mod2, body) ->
                   ConstructorWithSuper(name, params, mod, superName, superCall, Block(body))
    where
    mod := <fix-constructor-modifiers> (mod1, mod2)
  
  /**
   * Adds the given name of the function to all the return statements in it.
   * This allows us to type check the return statements in NaBL2.
   */
  add-function-name-to-return(|funName): ReturnStatement(e) -> ReturnStatement(funName, e)
  add-function-name-to-return(|funName): VoidReturn()       -> VoidReturn(funName)

  //-----------------------------------------------------------------------------------------------
  //Convert back to original AST
  resugar = resugar-fun
  
  resugar-fun: Function("*fallback", [], m, VoidType(), Block(s))
               -> FallBackFunction(m, s)
  resugar-fun: Function(n, p, m, VoidType(), Block(s))
               -> VoidFunction(n, p, m, s)
  resugar-fun: Function(n, p, m, t, Block(s))
               -> Function(n, p, m, Returns(<restore-return-type> t), s)
 
  resugar-fun: AbstractFunction(n, p, m, VoidType())
               -> AbstractFunction(n, p, m, None())
  resugar-fun: AbstractFunction(n, p, m, t)
               -> AbstractFunction(n, p, m, Some(Returns(<restore-return-type> t)))
               
  resugar-fun: Constructor(_, p, NoModifier(), Block(s))
               -> Constructor(p, None(), s)
  resugar-fun: Constructor(_, p, m, Block(s))
               -> Constructor(p, Some(m), s)
  resugar-fun: ConstructorWithSuper(_, p, NoModifier(), sn, sc, Block(s))
               -> ConstructorWithSuper(p, None(), ModSuperCall(sn, sc), None(), s)
  resugar-fun: ConstructorWithSuper(_, p, m, sn, sc, Block(s))
               -> ConstructorWithSuper(p, Some(m), ModSuperCall(sn, sc), None(), s)
  
  //Restore return statements
  resugar-fun: ReturnStatement(_, e) -> ReturnStatement(e)
  resugar-fun: VoidReturn(_)         -> VoidReturn()
  
  //Restore the return type
  restore-return-type: VoidType()       -> []
  restore-return-type: type             -> [type]
  restore-return-type: TupleType(types) -> types
