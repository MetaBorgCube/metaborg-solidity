module codegen/build

//TODO Build codegen similar to jasmin
//imports
//  libspoofax/resource/path
//  codegen/program
//
//rules
//
//  /**
//   * Transform Solidity AST to EVM AST and show the resulting ATerm.
//   *
//   * @type Solidity AST -> EVM AST
//   */
//   //show-jbc -> show-ebc
//  show-ebc:
//    (selected, _, ast, path, project-path) -> (filename, result)
//    with
//      filename := <guarantee-extension(|$[e.aterm])> path
//    ; result   := <program-to-ebc; map(set-jasmin-source(|path))> ast
//
//  /**
//   * Generate Jasmin files (.j files) for each of the classes in the Solidity AST.
//   *
//   * @type Solidity AST -> None
//   */
//   //generate-jbc -> generate-ebc
//  generate-ebc:
//    (selected, _, ast, path, project-path) -> None()
//    with
//      dir := <remove-extension> path
//    ; <try(mkdir)> dir
//    ; <program-to-ebc; map(set-jasmin-source(|path)); map(write-ebc(|dir))> ast
//
//  /**
//   * Generate bytecode (.class files) for each of the classes in the Solidity AST.
//   *
//   * @type Solidity AST -> None
//   */
//   //TODO Generate hexadecimal strings?
//  generate-jc:
//    (selected, _, ast, path, project-path) -> None()
//    with
//      dir := <remove-extension> path
//    ; <try(mkdir)> dir
//    ; <program-to-ebc; map(set-jasmin-source(|path)); map(jasmin-generate(|project-path))> ast
//
//  //TODO Generate extra info files
//
//  /**
//   * Generate bytecode (.class files) for each of the classes in the MiniJava AST
//   * and run the main class.
//   */
//  run-jc:
//    (selected, _, ast, path, project-path) -> result
//    with
//      dir := <remove-extension> path
//    ; <try(mkdir)> dir
//    ; jbc-class* := <program-to-ebc; map(set-jasmin-source(|path))> ast
//    ; <map(jasmin-generate(|project-path))> jbc-class*
//    ; result := <Hd; jasmin-execute(|project-path)> jbc-class*
//
//rules
//
//  set-jasmin-source(|path) = JBCFile(JBCHeader(id, !JBCSource(<double-quote> path), id, id, id, id, id, id, id, id), id, id)
//
//  write-ebc(|dir):
//    f@EBCFile(JBCHeader(_, _, JBCClass(_, cn), _, _, _, _, _, _, _), _, _) -> fn
//    where
//      fn  := $[[dir]/[cn].j]
//    ; <fputs; fclose> (<jasmin-pp> f, <fopen> (fn, "w"))
//      
//  run-jc-trim:
//    selected -> trimmed
//    with
//      (_, output) := <run-jc> (selected, None(), selected, "Main.spt", <project-path>)
//    ; trimmed     := <string-replace(|"\n", "");string-replace(|"\r", "")> output
