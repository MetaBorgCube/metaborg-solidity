module expressions

imports
  signatures/expressions-sig
  

signature
  sorts
    BinExp UnExp BinOp UnOp

  constructors
    //Normal
    UMinus : UnOp
	Plus   : BinOp
	Minus  : BinOp
	Mult   : BinOp
	Div    : BinOp
	Mod    : BinOp
	Pow    : BinOp
	
	//Shifts
	LShift : BinOp
	RShift : BinOp
	
	//Bitwise
	BitOr  : BinOp
	BitAnd : BinOp
	BitXor : BinOp
	BitNot : UnOp
	
	//Comparison
	Lt     : BinOp
	Gt     : BinOp
	LtEq   : BinOp
	GtEq   : BinOp
	Eq     : BinOp
	NEq    : BinOp
	
	//Boolean operators
	And    : BinOp
	Or     : BinOp
	Not    : UnOp
	
	//Arrays
	Subscript: BinOp
	
	//Create and delete
	Delete : UnOp
	
	//?
	Integer : UnOp
	Length : UnOp
	Array : UnOp
	Object : UnOp
	
	
	
    //Sort rules
	BinExp : BinOp * Exp * Exp     -> Exp
	BinExp : BinOp * Exp * AlsoExp -> Exp
	
	UnExp : UnOp * Exp -> Exp
	UnExp : UnOp * ID  -> Exp
	UnExp : UnOp * INT -> Exp

rules
  //Normal
  desugar: Add(e1, e2) -> BinExp(Plus(), e1, e2)
  desugar: Sub(e1, e2) -> BinExp(Minus(), e1, e2)
  desugar: Mul(e1, e2) -> BinExp(Mult(), e1, e2)
  desugar: Div(e1, e2) -> BinExp(Div(), e1, e2)
  desugar: Mod(e1, e2) -> BinExp(Mod(), e1, e2)
  desugar: Pow(e1, e2) -> BinExp(Pow(), e1, e2)
  desugar: UMin(e1)    -> UnExp(UMinus(), e1)
  desugar: UPlus(e1)   -> e1
  
  //Shifts
  desugar: LShift(e1, e2) -> BinExp(LShift(), e1, e2)
  desugar: RShift(e1, e2) -> BinExp(RShift(), e1, e2)

  //Bitwise
  desugar: BitAnd(e1, e2) -> BinExp(BitAnd(), e1, e2)
  desugar: BitOr(e1, e2)  -> BinExp(BitOr(), e1, e2)
  desugar: BitXor(e1, e2) -> BinExp(BitXor(), e1, e2)
  desugar: BitNot(e1)     -> UnExp(BitNot(), e1)

  //Equality
  desugar: Lt(e1, e2)   -> BinExp(Lt(), e1, e2)
  desugar: LtEq(e1, e2) -> BinExp(LtEq(), e1, e2)
  desugar: Gt(e1, e2)   -> BinExp(Gt(), e1, e2)
  desugar: GtEq(e1, e2) -> BinExp(GtEq(), e1, e2)
  desugar: Eq(e1, e2)   -> BinExp(Eq(), e1, e2)
  desugar: NEq(e1, e2)  -> BinExp(NEq(), e1, e2)
  
  //Boolean operators
  desugar: And(e1, e2) -> BinExp(And(), e1, e2)
  desugar: Or(e1, e2)  -> BinExp(Or(), e1, e2)
  desugar: Not(e1)     -> UnExp(Not(), e1)
  
  //Array access
  desugar: Subscript(e1, e2) -> BinExp(Subscript(), e1, e2)
  
  //Delete
  desugar: Delete(e1)   -> UnExp(Delete(), e1)
  
  //Assignment
  desugar: AddAssign(v, e1) -> Assign(v, BinExp(Plus(), v, e1))
  desugar: SubAssign(v, e1) -> Assign(v, BinExp(Minus(), v, e1))
  desugar: MulAssign(v, e1) -> Assign(v, BinExp(Mult(), v, e1))
  desugar: DivAssign(v, e1) -> Assign(v, BinExp(Div(), v, e1))
  desugar: ModAssign(v, e1) -> Assign(v, BinExp(Mod(), v, e1))
  
  desugar: BitOrAssign(v, e1)  -> Assign(v, BinExp(BitOr(), v, e1))
  desugar: BitAndAssign(v, e1) -> Assign(v, BinExp(BitAnd(), v, e1))
  desugar: BitXorAssign(v, e1) -> Assign(v, BinExp(BitXor(), v, e1))
  
  desugar: LShiftAssign(v, e1) -> Assign(v, BinExp(LShift(), v, e1))
  desugar: RShiftAssign(v, e1) -> Assign(v, BinExp(RShift(), v, e1))
