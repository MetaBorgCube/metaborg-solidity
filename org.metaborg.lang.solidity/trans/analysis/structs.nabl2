module analysis/structs

imports
  signatures/structs-sig
  analysis/types

signature
  namespaces
    Struct

rules
  [[ Struct(name, fields) ^ (s) ]] :=
    //Resolve fields
    new structScope,
    structScope -P-> s,
    Map1T [[ fields ^ (structScope) : tysFields ]],
    
    Struct{name}         <- s,
    TypeReferrable{name} <- s,
    Struct{name}         : structType !,
    TypeReferrable{name} : structType !,
    structType == NamedT(Struct{name}, structScope, StructT()),
    
    //Ensure var subtyping works
    VarT() <sub! structType,
    
    //Creating structs is done via a function call, so we add a function to the contract scope.
    Function{name} <- s,
    Function{name} : FunctionT(tysFields, structType),
    
    distinct/name D(structScope)/Var | error $[Duplicate variable [NAME]] @NAMES,
    
    Struct{name}         =I=> structScope,
    TypeReferrable{name} =I=> structScope.
  
  [[ StructField(solType, name) ^ (structScope) : tyStructField ]] :=
    [[ solType ^ (structScope) : tyStructField ]],
    
    Var{name} <- structScope,
    Var{name}.origin   := StructField(),
    Var{name}.constant := FalseC(),
    Var{name} : tyStructField !. 