module analysis/expressions

imports
  desugar/builtins

rules
  //-------------------------------------------------------------------------------------------------------------------
  //Literals
  //-------------------------------------------------------------------------------------------------------------------
  
  [[ True()  ^ (s) : BoolT() ]].
  [[ False() ^ (s) : BoolT() ]].
  
  [[ IntLiteral(_, min, Some(umin)) ^ (s) : NrT(min, umin) ]].
  [[ IntLiteral(_, min, None())     ^ (s) : IntT(min)      ]].
  [[ BigDec(nr)                     ^ (s) : ty             ]] :=
    false | error $[This expression yields "[nr]", but only integer numbers are supported.].
  
  [[ HexLit(_)         ^ (s) : StringT()       ]].
  [[ StringLit(_, len) ^ (s) : StringLitT(len) ]].
  
  [[ LitArray(exps, size) ^ (s) : tyArrayLiteral ]] :=
    CheckLitArrayType[[ exps ^ (s) : tyExps ]],
    
    BuiltInType{"farray"} -> s,
    BuiltInType{"farray"} |-> farray,
    farray ?===> farrayScope,
    BuiltInType{"darray"} -> s,
    BuiltInType{"darray"} |-> darray,
    darray ?===> darrayScope,
    
    tyArrayLiteral == FArrayT(tyExps, size, farrayScope),
    tyDArray       == DArrayT(tyExps, darrayScope),
    tyArrayLiteral <sub! tyDArray,
    VarT()         <sub! tyArrayLiteral,
    VarT()         <sub! tyDArray.
  
  CheckLitArrayType [[ [x|xs] ^ (s) : ty ]] :=
    [[ x ^ (s) : xTy ]],
    xTy == ty | error $[All items in the array must have the same type] @x.

  //-------------------------------------------------------------------------------------------------------------------
  //This
  //-------------------------------------------------------------------------------------------------------------------
  
  [[ t@This() ^ (s) : tyThis ]] :=
    This{"this"@t} -> s,
    This{"this"@t} |-> self | error $[You can only refer to "this" from within contracts and libraries],
    self : tyThis.
  
  //-------------------------------------------------------------------------------------------------------------------
  //Cast
  //-------------------------------------------------------------------------------------------------------------------
  
  [[ Cast(stype, exp) ^ (s) : tyCastType ]] :=
    [[ stype ^ (s) : tyCastType ]],
    [[ exp ^ (s)   : tyCastExp  ]],
    
    tyCastTypeS is simplifyTypeForCast of tyCastType,
    tyCastExpS  is simplifyTypeForCast of tyCastExp,
    tyCastExpS <cast? tyCastTypeS | error $[Cannot cast expression of type [tyCastExp] to [tyCastType]].
  
  //-------------------------------------------------------------------------------------------------------------------
  //Ternary if
  //-------------------------------------------------------------------------------------------------------------------
  
  [[ Ternary(condExp, e1, e2) ^ (s) : tyTernary ]] :=
    [[ condExp ^ (s) : BoolT() ]],
    [[ e1 ^ (s) : tyTernaryE1 ]],
    [[ e2 ^ (s) : tyTernaryE2 ]],
    
    tyTernary is sub.lub of (tyTernaryE1, tyTernaryE2),
    tyTernaryS is simplifyType of tyTernary,
    tyTernaryS <test? IsType() | error $[No common subtype between branches! Found types: [tyTernaryE1] and [tyTernaryE2]].
  
  //-------------------------------------------------------------------------------------------------------------------
  // Arithmetic operators
  //-------------------------------------------------------------------------------------------------------------------
  
  [[ UnExp(UMinus(), exp) ^ (s) : tyUMin ]] :=
    [[ exp ^ (s) : tyUMinExp ]],
    tyUMin is sub.lub of (IntT(8), tyUMinExp).
  
  [[ b@BinExp(Plus(), _, _)  ^ (s) : tyPlus ]] := SimpleArithOp [[ b ^ (s) : tyPlus ]].
  [[ b@BinExp(Minus(), _, _) ^ (s) : tySub  ]] := SimpleArithOp [[ b ^ (s) : tySub  ]].
  [[ b@BinExp(Mult(), _, _)  ^ (s) : tyMult ]] := SimpleArithOp [[ b ^ (s) : tyMult ]].
  
  [[ b@BinExp(Div(), _, e2)  ^ (s) : tyDiv  ]] := SimpleArithOp [[ b ^ (s) : tyDiv ]],
    NaBLTrue() is notZeroConst of e2 | error $[Division by zero is not allowed] @e2.
  [[ b@BinExp(Mod(), _, e2)  ^ (s) : tyMod  ]] := SimpleArithOp [[ b ^ (s) : tyMod ]],
    NaBLTrue() is notZeroConst of e2 | error $[Modulo zero is not allowed] @e2.
  
  SimpleArithOp [[ BinExp(_, e1, e2) ^ (s) : tyArithOp ]] :=
    [[ e1 ^ (s) : tyArithOpE1 ]],
    [[ e2 ^ (s) : tyArithOpE2 ]],
    
    //The first argument must allow basic arithmetic operations
    tyArithOpE1S is simplifyType of tyArithOpE1,
    tyArithOpE1S <test? CanArithBasic() | error $[Expected number, but was [tyArithOpE1]. You can only perform this operation on numbers] @e1,
    tyArithOp is sub.lub of (tyArithOpE1, tyArithOpE2) | error $[You can only perform this operation on numbers].
  
  [[ BinExp(Pow(), e1, e2) ^ (s) : tyPow ]] :=
    [[ e1 ^ (s) : tyPowE1 ]],
    [[ e2 ^ (s) : tyPowE2 ]],
    
    //First argument must be an unsigned integer
    UIntTS() is simplifyType of tyPowE1 | error $[Unexpected [tyPowE1], first argument of pow must be an unsigned integer] @e1,
    
    //Second argument must be either an integer literal, or unsigned
    NaBLTrue() is isUnsignedIntOrLiteral of tyPowE2 | error $[Unexpected [tyPowE2], second argument of pow must be a literal number or an unsigned integer] @e2,
    tyPow is sub.lub of (tyPowE1, tyPowE2) | error $[You can only perform this operation on integers].
  
  //-------------------------------------------------------------------------------------------------------------------
  //Shifts
  //-------------------------------------------------------------------------------------------------------------------
  
  [[ b@BinExp(LShift(), _, _) ^ (s) : tyLShift ]] := Shift [[ b ^ (s) : tyLShift ]].
  [[ b@BinExp(RShift(), _, _) ^ (s) : tyRShift ]] := Shift [[ b ^ (s) : tyRShift ]].
  
  Shift [[ BinExp(_, e1, e2) ^ (s) : tyShift ]] :=
    [[ e1 ^ (s) : tyShiftE1 ]],
    [[ e2 ^ (s) : tyShiftE2 ]],
    
    //Argument 1 must be shiftable
    tyShiftE1S is simplifyType of tyShiftE1,
    tyShiftE1S <test? CanBitwiseOps(),
    
	//Argument 2 must be an integer. If it is a literal, it must be non-negative
	tyShiftE2 <test? IsInt()             | error $[Invalid type [tyShiftE2], must be an integer] @e2,
    NaBLTrue() is notNegativeConst of e2 | error $[Cannot shift with a negative number] @e2,
    
    tyShift == tyShiftE1.
  
  //-------------------------------------------------------------------------------------------------------------------
  //Bitwise operations
  //-------------------------------------------------------------------------------------------------------------------
  
  [[ u@UnExp(BitNot(),  _)    ^ (s) : tyBitNot ]] := BitOp [[ u ^ (s) : tyBitNot ]].
  [[ b@BinExp(BitOr(),  _, _) ^ (s) : tyBitOr  ]] := BitOp [[ b ^ (s) : tyBitOr  ]].
  [[ b@BinExp(BitAnd(), _, _) ^ (s) : tyBitAnd ]] := BitOp [[ b ^ (s) : tyBitAnd ]].
  [[ b@BinExp(BitXor(), _, _) ^ (s) : tyBitXor ]] := BitOp [[ b ^ (s) : tyBitXor ]].
  
  BitOp [[ UnExp(_, exp) ^ (s) : tyBitOp ]] :=
    [[ exp ^ (s) : tyBitExp ]],
    
    //Argument must allow bitwise operations
    tyBitExpS is simplifyType of tyBitExp,
    tyBitExpS <test? CanBitwiseOps() | error $[Unexpected [tyBitExp], expected number or byte array] @exp,
    
    tyBitOp == tyBitExp.
    
  BitOp [[ BinExp(_, e1, e2) ^ (s) : tyBitOp ]] :=
    [[ e1 ^ (s) : tyBitOpE1 ]],
    [[ e2 ^ (s) : tyBitOpE2 ]],
    
    //First argument must allow bitwise operations
    tyBitOpE1S is simplifyType of tyBitOpE1,
    tyBitOpE1S <test? CanBitwiseOps() | error $[Unexpected [tyBitOpE1], expected number or byte array] @e1,

    tyBitOp is sub.lub of (tyBitOpE1, tyBitOpE2) | error $[Both arguments of bitwise operators must be numbers].

  //-------------------------------------------------------------------------------------------------------------------
  //++ and --
  //-------------------------------------------------------------------------------------------------------------------
  
  [[ u@UnExp(IncRet(), _) ^ (s) : tyIncRet ]] := IncDecRet [[ u ^ (s) : tyIncRet ]].
  [[ u@UnExp(DecRet(), _) ^ (s) : tyDecRet ]] := IncDecRet [[ u ^ (s) : tyDecRet ]].
  [[ u@UnExp(RetInc(), _) ^ (s) : tyRetInc ]] := IncDecRet [[ u ^ (s) : tyRetInc ]].
  [[ u@UnExp(RetDec(), _) ^ (s) : tyRetDec ]] := IncDecRet [[ u ^ (s) : tyRetDec ]].
    
  IncDecRet [[ UnExp(_, exp) ^ (s) : tyIncDecRet ]] :=
    [[ exp ^ (s) : tyIncDecRet ]],
    tyIncDecRet is sub.lub of (NrT(8, 8), tyIncDecRet) | error $[You can only use ++ and -- on numbers].

  //-------------------------------------------------------------------------------------------------------------------
  //Comparisons
  //-------------------------------------------------------------------------------------------------------------------
  
  [[ b@BinExp(Eq(),   _, _) ^ (s) : BoolT() ]] := Compare        [[ b ^ (s) ]].
  [[ b@BinExp(NEq(),  _, _) ^ (s) : BoolT() ]] := Compare        [[ b ^ (s) ]].
  [[ b@BinExp(Lt(),   _, _) ^ (s) : BoolT() ]] := CompareOrdered [[ b ^ (s) ]].
  [[ b@BinExp(LtEq(), _, _) ^ (s) : BoolT() ]] := CompareOrdered [[ b ^ (s) ]].
  [[ b@BinExp(Gt(),   _, _) ^ (s) : BoolT() ]] := CompareOrdered [[ b ^ (s) ]].
  [[ b@BinExp(GtEq(), _, _) ^ (s) : BoolT() ]] := CompareOrdered [[ b ^ (s) ]].
  
  Compare [[ BinExp(_, e1, e2) ^ (s) ]] :=
    [[ e1 ^ (s) : tyCompE1 ]],
    [[ e2 ^ (s) : tyCompE2 ]],
    
    //Check first argument to see if it can be used in comparisons
    tyCompE1S is simplifyType of tyCompE1,
    tyCompE1S <test? CanCompare() | error $[You cannot compare instances of type [tyCompE1]] @e1,
    tyCompE2S is simplifyType of tyCompE2,
    tyCompE2S <test? CanCompare() | error $[You cannot compare instances of type [tyCompE2]] @e2,
    
    tyComp is sub.lub of (tyCompE1, tyCompE2) | error $[Incomparable types [tyCompE1] [tyCompE2]].
  
  CompareOrdered [[ BinExp(_, e1, e2) ^ (s) ]] :=
    [[ e1 ^ (s) : tyCompE1 ]],
    [[ e2 ^ (s) : tyCompE2 ]],
    
    //Check first argument to see if we can do ordered comparison on it.
    tyCompE1S is simplifyType of tyCompE1,
    tyCompE1S <test? CanCompareOrdered() | error $[Unexpected [tyCompE1], this comparison can only be performed with numeric types] @e1,
    
    tyComp is sub.lub of (tyCompE1, tyCompE2) | error $[Incomparable types [tyCompE1] [tyCompE2]].
  
  //-------------------------------------------------------------------------------------------------------------------
  //Boolean operators
  //-------------------------------------------------------------------------------------------------------------------
  
  [[ BinExp(And(), e1, e2) ^ (s) : BoolT() ]] :=
    [[ e1 ^ (s) : BoolT() ]],
    [[ e2 ^ (s) : BoolT() ]].
  [[ BinExp(Or(), e1, e2) ^ (s)  : BoolT() ]] :=
    [[ e1 ^ (s) : BoolT() ]],
    [[ e2 ^ (s) : BoolT() ]].
  [[ UnExp(Not(), exp) ^ (s) : BoolT() ]] :=
    [[ exp ^ (s) : BoolT() ]].
  
  //-------------------------------------------------------------------------------------------------------------------
  //Array access
  //-------------------------------------------------------------------------------------------------------------------
  
  [[ BinExp(Subscript(), exp, indexExp) ^ (s) : tySubScript ]] :=
    [[ exp      ^ (s) : tyExp ]],
    [[ indexExp ^ (s) : tyIndexActual ]],
    
    //Determine if we can use this operator on this expression
    tyExpTS is simplifyType of tyExp,
    tyExpTS <test? CanIndex() | error $[You can only use subscript on arrays and mappings],
    
    //Determine if the index is of the correct type
    tyIndexExpected is indexType of tyExp | error $[You can only use subscript on arrays and mappings],
    tyIndex is sub.lub of (tyIndexActual, tyIndexExpected) | error $[The index type must be a subtype of [tyIndexExpected]],
    tyIndexTS is simplifyType of tyIndex,
    tyIndexTS <test? IsType(),
    
    //Determine the type of elements.
    tySubScript is elementType of tyExp.
  
  //-------------------------------------------------------------------------------------------------------------------
  //Variable references
  //-------------------------------------------------------------------------------------------------------------------
  
  [[ v@IdRef(_)        ^ (s) : tyRef ]] := ResolveVarRef [[ v ^ (s) : tyRef ]].
  [[ m@MemberRef(_, _) ^ (s) : tyRef ]] := ResolveVarRef [[ m ^ (s) : tyRef ]].
  
  //-------------------------------------------------------------------------------------------------------------------
  //Calls
  //-------------------------------------------------------------------------------------------------------------------
  
  [[ PackedExp(exps) ^ (s) : PackedT() ]] :=
    Map1T [[ exps ^ (s) : tyExps ]].
  
  [[ Call(FunctionCall(ref, args)) ^ (s) : tyCall ]] :=
    ResolveFunctionRef [[ ref ^ (s) : tyFun ]],
    Map1T [[ args ^ (s) : tysArgs ]],
    
    tyFun == FunctionT(tysParams, tyRet) | error $[You can only call functions (not [tyCallRef])],
    
    //We could potentially call a builtin function with any type parameters, so we use the fix.
    (t1, t2) is fixAny of (tysArgs, tysParams),
    t1 <sub? t2 | error $[Argument types [tysArgs] do not match parameter types [tysParams]],
    tyCall == tyRet.
  
  //-------------------------------------------------------------------------------------------------------------------
  //Creation and deletion
  //-------------------------------------------------------------------------------------------------------------------
  
  [[ NewObject(name, args) ^ (s) : tyNewObject ]] :=
    Map1T [[ args ^ (s) : tysArgs ]],
    
    Contract{name} -> s,
    Contract{name} |-> contract | error $[No contract/library/interface with the name [name] found],
    contract ?=I=> typeScope,
    
    //Resolve in a temporary scope
    new resolveScope,
    resolveScope -P-> typeScope,
    Function{name} -> resolveScope,
    Function{name} |-> fun | error $[Unable to find constructor of [name]],
    fun : FunctionT(tysParams, tyNewObject),
    
    tysArgs <sub? tysParams | error $[Argument types [tysArgs] do not match parameter types [tysParams]].
    
  [[ NewArray(arrayType, sizeExp) ^ (s) : tyNewArray ]] :=
    [[ arrayType ^ (s) : tyNewArray ]],
    [[ sizeExp   ^ (s) : tySizeExp ]],
    
    //Check if the size is an unsigned integer
    tySizeReal is sub.lub of (tySizeExp, UIntT(256)) | error $[Size must be an unsigned integer] @sizeExp,
    UIntTS() is simplifyType of tySizeReal           | error $[Size must be an unsigned integer] @sizeExp.
  
  [[ NewStruct(structType, assigns) ^ (s) : tyStruct ]] :=
    [[ structType ^ (s) : tyStruct ]],
    Map2 [[ assigns ^ (s, resolveScope) ]],
    
    //Find struct and scope
    tyStruct == NamedT(_, _, StructT()),
    structScope is getScope of tyStruct | error $[Unable to find struct [structType]],
    
    new resolveScope,
    resolveScope -P-> structScope.
  
  [[ UnExp(Delete(), exp) ^ (s) : TupleT([]) ]] :=
    [[ exp ^ (s) : tyDeleteExp ]].
  
  //-------------------------------------------------------------------------------------------------------------------
  //Assignment
  //-------------------------------------------------------------------------------------------------------------------
  [[ Assign(varRef, exp) ^ (s) : tyAssign ]] :=
    [[ varRef ^ (s) : tyAssignVar ]],
    [[ exp    ^ (s) : tyAssignExp ]],
    tyAssignExp <sub? tyAssignVar | error $[Cannot assign expression of type [tyAssignExp] to a variable of type [tyAssignVar]] @exp,
    tyAssign == tyAssignVar.
  
  [[ StructAssign(field, exp) ^ (s, structScope) ]] :=
    [[ exp ^ (s) : tyExp ]],
    
    Var{field} -> structScope,
    Var{field} |-> structField | error $[No field [field] found!],
    structField : tyStructField,
    
    tyExp <sub? tyStructField | error $[Cannot assign expression of type [tyExp] to a field with type [tyStructField]] @exp.
  
  [[ AssignTuple(names, exp) ^ (s) : tyAssignTuple ]] :=
    Map1T(AssignTuple) [[ names ^ (s) : tyAssignTupleNames ]],
    [[ exp ^ (s) : tyAssignExp ]],
    TupleT(tyAssignTupleNames) <sub? tyAssignExp | error $[Cannot assign expression of type [tyAssignExp] to a variable of type [tyAssignTupleNames]] @exp.
  
  AssignTuple [[ TupleName(None())     ^ (s) : VarT()  ]].
  AssignTuple [[ TupleName(Some(name)) ^ (s) : tupleTy ]] :=
    Var{name} -> s,
    Var{name} |-> d | error $[Cannot find variable with the name [name]],
    d : tupleTy.
  
