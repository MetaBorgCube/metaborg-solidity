module analysis/vars

imports
  signatures/-

signature
  namespaces
    Var { origin : term, constant : term }

rules
  [[ StructField(solType, name) ^ (structScope) ]] :=
    [[ solType ^ (structScope) : tyStructField ]],
    
    Var{name} <- structScope,
    Var{name}.origin   := StructField(),
    Var{name}.constant := FalseC(),
    Var{name} : tyStructField !. 
  
  [[ Param(solType, modLoc, None()) ^ (s) : tyParam ]] :=
    [[ solType ^ (s) : tyParam ]].

  [[ Param(solType, modLoc, Some(name)) ^ (s) : tyParam ]] :=
    [[ solType ^ (s) : tyParam ]],
    
    Var{name} <- s,
    Var{name}.origin   := Param(),
    Var{name}.constant := FalseC(),
    Var{name} : tyParam !.
  
  [[ ReturnParam(solType, modLoc, None()) ^ (s) : tyRetParam ]] :=
    [[ solType ^ (s) : tyRetParam ]].
  
  [[ ReturnParam(solType, modLoc, Some(name)) ^ (s) : tyRetParam ]] :=
    [[ solType ^ (s) : tyRetParam ]],
    
    Var{name} <- s,
    Var{name}.origin   := Param(),
    Var{name}.constant := FalseC(),
    Var{name} : tyRetParam !.
  
  //Refs
  [[ VarRef(name) ^ (s) : tyVarRef ]] :=
    Var{name} -> s,
    Var{name} |-> var | error $[Cannot find variable with name [name]],
    var : tyVarRef.

  [[ Member(exp, name) ^ (s) : tyMemberRef ]] :=
    //Determine scope of what we are calling on
    [[ exp ^ (s) : tyMemberExp ]],
    tyMemberExp_2 is simplifyType of tyMemberExp | error $[Type [tyMemberExp] does not have fields!] @exp,
    tyMemberExp_2 <test? IsType()                | error $[Type [tyMemberExp] does not have fields!] @exp,
    tyMemberExp == NamedT(occ, tyNamed)          | error $[Type [tyMemberExp] does not have fields!] @exp,
    occ ?=I=> typeScope,
    
    //Resolve in a temporary scope
    new resolveScope,
    resolveScope -P-> typeScope,
    
    Var{name} -> resolveScope,
    Var{name} |-> var | error $[Cannot find variable with name [name] in [occ]] @name,
    var : tyMemberRef.