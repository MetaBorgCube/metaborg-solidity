module analysis/vars

imports
  signatures/-

signature
  namespaces
    Var { origin : term, constant : term }

rules
  [[ StructField(solType, name) ^ (structScope) ]] :=
    [[ solType ^ (structScope) : ty ]],
    
    Var{name} <- structScope,
    Var{name}.origin   := StructField(),
    Var{name}.constant := FalseC(),
    Var{name} : ty !. 
  
  [[ Param(solType, modLoc, None()) ^ (s) : ty ]] :=
    [[ solType ^ (s) : ty ]].

  [[ Param(solType, modLoc, Some(name)) ^ (s) : ty ]] :=
    [[ solType ^ (s) : ty ]],
    
    Var{name} <- s,
    Var{name}.origin   := Param(),
    Var{name}.constant := FalseC(),
    Var{name} : ty !.
  
  [[ ReturnParam(solType, modLoc, None()) ^ (s) : ty ]] :=
    [[ solType ^ (s) : ty ]].
  
  [[ ReturnParam(solType, modLoc, Some(name)) ^ (s) : ty ]] :=
    [[ solType ^ (s) : ty ]],
    
    Var{name} <- s,
    Var{name}.origin   := Param(),
    Var{name}.constant := FalseC(),
    Var{name} : ty !.
  
  //Refs
  [[ VarRef(name) ^ (s) : ty ]] :=
    Var{name} -> s,
    Var{name} |-> var | error $[Cannot find variable with name [name]],
    Var{name} : ty.
