module analysis/solidity

imports

  signatures/-
  desugar/numbers
  
  analysis/types
  
  analysis/contracts
  analysis/enums
  analysis/events
  analysis/expressions
  analysis/functionmodifiers
  analysis/functions
  analysis/globals
  analysis/interfaces
  analysis/libraries
  analysis/modifiers
  analysis/modifiertypes
  analysis/pragmas
  analysis/refs
  analysis/solimports
  analysis/statements
  analysis/statevariables
  analysis/structs
  analysis/usingfor
  
  analysis/subtypes/addresses
  analysis/subtypes/bytearrays
  analysis/subtypes/integers
  analysis/subtypes/numberliterals
  analysis/subtypes/stringliterals
  analysis/subtypes/vars

signature
  name resolution
    labels
      P I

    order
      // Check local declarations over imports and parents
      D < P,
      D < I,
      
      // Check imports before parents
      I < P

    well-formedness
      // P* I*   gives: D < PD < PI+D       = Local (var/param) over parent (field/function/contract) over super (super field/super function)
      //                PPD                 = Contract lookup (Function -> Contract -> Program -> Contract Definition)
      (P* I*)

  sorts
    NaBLBool
    TypeTest
  
  constructors
    //True/false placeholders
    NaBLFalse : NaBLBool
    NaBLTrue  : NaBLBool
    
    //Different checks
    IsType            : TypeTest
    IsInt             : TypeTest
    IsNumeric         : TypeTest
    CanCompare        : TypeTest
    CanCompareOrdered : TypeTest
    CanArithBasic     : TypeTest
    CanBitwiseOps     : TypeTest
    CanIndex          : TypeTest
    
  relations
    /**
     * Normal subtyping relation.
     */
    reflexive, anti-symmetric, transitive sub  : Type * Type {
      [+sub],
      FArrayT(+sub),
      DArrayT(+sub),
      TupleT(+sub)
    }
    
    /**
     * Relation for checking visibility rules.
     */
    reflexive, anti-symmetric, transitive vissub : VisibilityType * VisibilityType {
      [+vissub]
    }
    
    /**
     * For checking various properties of a simplified type.
     */
    anti-symmetric, anti-transitive test : Type * TypeTest
    
    /**
     * For casting a type to another type. Casting to the same type is always allowed.
     */
    reflexive cast : Type * Type
  
  functions
  
    /**
     * Returns NaBLFalse if the given term is zero.
     * Returns NaBLTrue otherwise (term is non-zero).
     */
    notZeroConst: Term -> NaBLBool {
      IntLiteral("0", _, _) -> NaBLFalse(),
      IntLiteral(i,   _, _) -> NaBLTrue(),
      exp                   -> NaBLTrue()
    }
    
    /**
     * Returns NaBLFalse if the given term is negative.
     * Returns NaBLTrue otherwise (term is positive).
     */
    notNegativeConst: Term -> NaBLBool {
      IntLiteral(i, _, None()) -> NaBLFalse(),
      IntLiteral(i, _, _)      -> NaBLTrue(),
      exp                      -> NaBLTrue()
    }
    
    /**
     * Returns the literal integer if the given term is a constant integer literal.
     */
    getLiteralInt: Term -> string {
      IntLiteral(i, _, _) -> i
    }
    
    /**
     * Throws away type specicality information, e.g. int8 -> int and bytes32 -> bytes.
     * 
     * Simplified types are used with the test and cast relations to determine if certain
     * operations can be performed on instances of a certain type. We need the erasure to avoid
     * having to add a relation for every possible instantiation of these types.
     *
     * This function returns the type unchanged for types that don't have any specific information,
     * as it makes no sense to simplify these types further.
     */
    simplifyType: Type -> Type {
      //Numeric types (length parameters)
      IntT(_)            -> IntTS(),
      UIntT(_)           -> UIntTS(),
      NrT(_, 0)          -> IntTS(),
      NrT(_, _)          -> UIntTS(), //Simplify NrT to UInt, as UInt can be used in more places
      FractT(_, _, _, _) -> UFixedTS(),
      FixedT(_, _)       -> FixedTS(),
      UFixedT(_, _)      -> UFixedTS(),
      
      //Address has a scope
      AddressT(_)        -> AddressTS(),
      
      //Arrays and strings have a base type, length and/or a scope
      FBytesT(_, _)      -> FBytesTS(),
      DBytesT(_)         -> DBytesTS(),
      FArrayT(_, _, _)   -> FArrayTS(),
      DArrayT(_, _)      -> DArrayTS(),
      StringT()          -> StringTS(),
      StringLitT(_)      -> StringTS(),
      
      //Mappings and Functions have additional type information
      MappingT(_, _)     -> MappingTS(),
      FunctionT(_, _)    -> FunctionTS(),
      
      NamedT(_, _, _)    -> NamedTS(),
      other              -> other
    }
    
    /**
     * Same as simplifyType, but for casts. The difference is that mappings, functions and
     * named types are not simplified.
     */
    simplifyTypeForCast : Type -> Type {
      //Numeric types (length parameters)
      IntT(_)            -> IntTS(),
      UIntT(_)           -> UIntTS(),
      NrT(_, 0)          -> IntTS(),
      NrT(_, _)          -> UIntTS(),
      FractT(_, _, _, _) -> UFixedTS(),
      FixedT(_, _)       -> FixedTS(),
      UFixedT(_, _)      -> UFixedTS(),
      AddressT(_)        -> AddressTS(),
      
      //Array-like
      FBytesT(_, _)      -> FBytesTS(),
      DBytesT(_)         -> DBytesTS(),
      FArrayT(_, _, _)   -> FArrayTS(),
      DArrayT(_, _)      -> DArrayTS(),
      StringT()          -> StringTS(),
      StringLitT(_)      -> StringTS(),
      
      //Don't convert the rest
      other              -> other
    }
    
    /**
     * Determines the type of the elements of a complex type.
     * E.g. for byte arrays, the elements are bytes.
     * For arrays, the elements are the base type.
     * For mappings, the elements are the value type of the mapping. 
     */
    elementType: Type -> Type {
      FBytesT(_, _)    -> NrT(8, 8),
      DBytesT(_)       -> NrT(8, 8),
      FArrayT(t, _, _) -> t,
      DArrayT(t, _)    -> t,
      MappingT(_, v)   -> v
    }
    
    /**
     * Determines the type that can be used for indexing this type.
     * E.g. for arrays, indexing is done with numbers.
     * For mappings, indexing is done with the type of the key.
     */
    indexType: Type -> Type {
      FBytesT(_, _)    -> UIntT(8),
      DBytesT(_)       -> UIntT(8),
      FArrayT(_, _, _) -> UIntT(8),
      DArrayT(_, _)    -> UIntT(8),
      MappingT(k, _)   -> k
    }
    
    /**
     * Returns true only if the given type is an integer literal or is an unsigned integer.
     */
    isUnsignedIntOrLiteral: Type -> NaBLBool {
      UIntT(_)           -> NaBLTrue(),
      NrT(_, _)          -> NaBLTrue(),
      other              -> NaBLFalse()
    }
    
    /**
     * Converts type to a signed type, or returns the original type.
     */
    toSigned: Type -> Type {
      IntT(i)            -> IntT(i),
      NrT(i, _)          -> IntT(i),
      FractT(m, n, _, _) -> FixedT(m, n),
      ty                 -> ty
    }
    
    /**
     * Gets the scope associated with the given type.
     * 
     * This function is used to implement type specific functions and fields,
     * such as length on arrays.
     */
    getScope: Type -> scope {
      AddressT(s)      -> s,
      FBytesT(_, s)    -> s,
      DBytesT(s)       -> s,
      FArrayT(_, _, s) -> s,
      DArrayT(_, s)    -> s,
      NamedT(_, s, _)  -> s
    }
    
    /**
     * This function fixes comparisons that potentially include the any type, up to an arity of 2.
     *
     * This function performs the following:
     *   x <sub? AnyT() --> VarT() <sub? x  (where x != AnyT())
     *
     * The reason this function exists, is that adding an any type would require quite a few
     * additional relations, and would complicate all the cases where the least upper bound is
     * requested.
     */
    fixAny: (Type * Type) -> (Type * Type) {
      //both sides are any -> no changes (keep reflexivity)
      (AnyT(),            AnyT())          -> (AnyT(),            AnyT()),
      ([AnyT()],         [AnyT()])         -> ([AnyT()],         [AnyT()]),
      ([AnyT(), AnyT()], [AnyT(), AnyT()]) -> ([AnyT(), AnyT()], [AnyT(), AnyT()]),
      
      //Right side is any -> swap and replace any with var (where any not on the left)
      (a,                 AnyT())          -> (VarT(),    a),
      ([a],              [AnyT()])         -> ([VarT()], [a]),
      ([AnyT(), a2],     [AnyT(), AnyT()]) -> ([AnyT(), VarT()], [AnyT(), a2]),
      ([a1, AnyT()],     [AnyT(), AnyT()]) -> ([VarT(), AnyT()], [a1, AnyT()]),
      ([a1, a2],         [AnyT(), AnyT()]) -> ([VarT(), VarT()], [a1, a2]),
      
      //Partial any match
      ([a1, a2],         [AnyT(), b2])     -> ([VarT(), a2],     [a1, b2]),
      ([a1, a2],         [b1, AnyT()])     -> ([a1, VarT()],     [b1, a2]),
      
      //Neither side has any
      (a, b)                               -> (a, b)
    }

rules

  init ^ (programScope) :=
    new programScope,
    
    //Casting int -> uint/address ; uint -> int/address ; address -> int/uint
    IntTS()     <cast! UIntTS(),
    IntTS()     <cast! AddressTS(),
    UIntTS()    <cast! IntTS(),
    UIntTS()    <cast! AddressTS(),
    AddressTS() <cast! IntTS(),
    AddressTS() <cast! UIntTS(),
    
    //Casting string -> bytes
    StringTS() <cast! DBytesTS(),
    
    //Type testing
    BoolT()  <test! IsType(),
    
    //Int: arithbasic: +-*/% bit: &|^~<<>> comp2: <!=>
    IntTS()  <test! IsType(),
    IntTS()  <test! IsInt(),
    IntTS()  <test! IsNumeric(),
    IntTS()  <test! CanCompare(),
    IntTS()  <test! CanCompareOrdered(),
    IntTS()  <test! CanArithBasic(),
    IntTS()  <test! CanBitwiseOps(),
    
    //Uint: arithbasic: +-*/%** bit: &|^~<<>> comp2: <!=>
    UIntTS() <test! IsType(),
    UIntTS() <test! IsInt(),
    UIntTS() <test! IsNumeric(),
    UIntTS() <test! CanCompare(),
    UIntTS() <test! CanCompareOrdered(),
    UIntTS() <test! CanArithBasic(),
    UIntTS() <test! CanBitwiseOps(),
 
    //Fixed: arithbasic: +-*/% comp2: <!=>
    FixedTS()  <test! IsType(),
    FixedTS()  <test! IsNumeric(),
    FixedTS()  <test! CanCompare(),
    FixedTS()  <test! CanCompareOrdered(),
    FixedTS()  <test! CanArithBasic(),
    
    //UFixed: arithbasic: +-*/% comp2: <!=>
    UFixedTS() <test! IsType(),
    UFixedTS() <test! IsNumeric(),
    UFixedTS() <test! CanCompare(),
    UFixedTS() <test! CanCompareOrdered(),
    UFixedTS() <test! CanArithBasic(),
    
    //Address: comp2: <!=>
    AddressTS() <test! IsType(),
    AddressTS() <test! CanCompare(),
    AddressTS() <test! CanCompareOrdered(),
    
    //BytesN: bit: &|^~<<>> comp2: <!=> index: []
    FBytesTS() <test! IsType(),
    FBytesTS() <test! CanBitwiseOps(),
    FBytesTS() <test! CanCompare(),
    FBytesTS() <test! CanCompareOrdered(),
    FBytesTS() <test! CanIndex(),
    
    //DBytes: comp1: != index: []
    DBytesTS() <test! IsType(),
    DBytesTS() <test! CanCompare(),
    DBytesTS() <test! CanIndex(),
    
    //Casting string -> bytes
    StringTS() <test! IsType(),
    StringTS() <test! CanCompare(),
    
    //Named types don't have any special properties
    NamedTS() <test! IsType(),
    NamedTS() <test! CanCompare(),
    
    //Arrays can be indexed
    FArrayTS() <test! IsType(),
    FArrayTS() <test! CanIndex(),
    DArrayTS() <test! IsType(),
    DArrayTS() <test! CanIndex(),
    
    //Mappings can be indexed
    MappingTS() <test! IsType(),
    MappingTS() <test! CanIndex().

  [[ p@Program(elements) ^ (programScope) ]] :=
    //Load built in types (address, arrays)
    BuiltInTypes        [[ p ^ (programScope) ]],
    
    //Load built in functions and fields
    BuiltInGlobals      [[ p ^ (programScope) ]],
    
    //Add subtyping relations between types
    SubNumberLiterals   [[ p ^ (programScope) ]],
    SubStringLiterals   [[ p ^ (programScope) ]],
    SubByteArrays       [[ p ^ (programScope) ]],
    SubIntegers         [[ p ^ (programScope) ]],
    SubAddresses        [[ p ^ (programScope) ]],
    SubVar              [[ p ^ (programScope) ]],
        
    InitVisibility      [[ p ^ (programScope) ]],
    
    Map1 [[ elements ^ (programScope) ]],
    
    distinct/name D(programScope)/Import         | error $[Two imports with the same name: [NAME]] @NAMES,
    distinct/name D(programScope)/TypeReferrable | error $[Duplicate type [NAME]] @NAMES.
  