module analysis/contracts

imports

  signatures/contracts-sig
  desugar/contracts
  analysis/types

signature
  namespaces
    Contract
    This

rules
  [[ c@Contract(name, parents, content) ^ (programScope) ]] :=
    //Resolve content and inheritance
    new contractScope,
    contractScope -P-> programScope,
    Map1 [[ content ^ (contractScope) ]],
    Map1t(ResolveInheritance) [[ parents ^ (contractScope) : contractType ]],
    
    //Define contract and type, also make it referrable
    Contract{name}       <- programScope,
    TypeReferrable{name} <- programScope,
    Contract{name}       : contractType !,
    TypeReferrable{name} : contractType !,
    contractType == NamedT(Contract{name}, contractScope, ContractT()),
    
    //Add subtyping with address and var
    GetAddressType [[ c ^ (programScope) : addressType ]],
    
    contractType <cast! addressType,
    contractType <sub!  addressType,
    VarT()       <sub!  contractType,
    
    //Create this
    This{"this" @c} <- contractScope,
    This{"this" @c} : contractType !,
    
    //Check contents for duplicate definitions (events and functions can be overloaded)
    distinct/name D(contractScope)/Var              | error $[Duplicate state variable [NAME]] @NAMES,
    distinct/name D(contractScope)/FunctionModifier | error $[Duplicate modifier [NAME]] @NAMES,
    distinct/name D(contractScope)/Struct           | error $[Duplicate struct [NAME]] @NAMES,
    distinct/name D(contractScope)/Enum             | error $[Duplicate enum [NAME]] @NAMES,
    distinct/name D(contractScope)/TypeReferrable   | warning $[Duplicate type [NAME]] @NAMES,
    
    distinct/name (D(contractScope)/Var isect D(contractScope)/Function) | error $[A function cannot have the same name as a state variable] @NAMES,
    
    Contract{name}       =I=> contractScope,
    TypeReferrable{name} =I=> contractScope.
  
  /**
   * Resolves inheritance by adding the parent.
   *
   * If there is a call to a super constructor, this rule will check the arguments.
   */
  ResolveInheritance [[ Super(name) ^ (cs) : contractType ]] :=
    AddParent [[ name ^ (cs) : contractType ]].
    
  ResolveInheritance [[ SuperCall(name, args) ^ (cs) : contractType ]] :=
    AddParent [[ name ^ (cs) : contractType ]],
    Map1T [[ args ^ (cs) : tysArgs ]],
    
    //Look for super constructor
    Function{name} -> cs,
    Function{name} |-> parentConstructor | error $[Cannot find constructor of [name]],
    parentConstructor : FunctionT(tysParams, tyRet),
    
    tysArgs <sub? tysParams | error $[Argument types [tysArgs] do not match constructor parameter types [tysParams]].
  
  /**
   * Adds a parent to the contract with the given type.
   *
   * This rule adds the parent as a subtype, imports its scope and checks for shadowing and
   * overriding.
   */
  AddParent [[ name ^ (cs) : contractType ]] :=
    //Find parent
    TypeReferrable{name} -> cs,
    TypeReferrable{name} |-> parent | error $[Cannot find parent [name]] @name,
    
    //Add subtyping
    parent : parentType,
    contractType <sub!  parentType,
    contractType <cast! parentType,
    parentType   <cast! contractType,
    
    //Import parent scope
    TypeReferrable{name} <=I= cs,
    
    //Check shadowing and overriding
    parent ?===> ps,
    ((D(cs)/Var isect/name W(ps)/Var) minus W(ps)/Var) seteq 0 | error $[State variable [NAME] hides state variable in super contract] @NAMES,
    ((D(cs)/Function isect/name W(ps)/Function) minus W(ps)/Function) seteq 0 | note $[Function [NAME] overrides super function] @NAMES.
  