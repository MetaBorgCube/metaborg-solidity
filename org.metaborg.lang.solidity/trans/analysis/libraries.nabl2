module analysis/libraries

imports

  signatures/libraries-sig
  analysis/types

signature
  namespaces
    Library

rules
  [[ c@Library(name, content) ^ (programScope) ]] :=
    //Define library and type, also make it referrable
    Library{name}        <- programScope,
    TypeReferrable{name} <- programScope,
    Library{name}        : libraryType !,
    TypeReferrable{name} : libraryType !,
    libraryType == NamedT(Library{name}, LibraryT()),
    VarT() <sub! libraryType,
    
    new libraryScope,
    libraryScope -P-> programScope,
    
    This{"this" @c} <- libraryScope,
    This{"this" @c} : libraryType !,
    
    Map1 [[ content ^ (libraryScope) ]],
    
    // Check contents for duplicate definitions (events and functions can be overloaded)
    distinct/name D(libraryScope)/StateVar         | error $[Duplicate state variable [NAME]] @NAMES,
    distinct/name D(libraryScope)/FunctionModifier | error $[Duplicate modifier [NAME]] @NAMES,
    distinct/name D(libraryScope)/Struct           | error $[Duplicate struct [NAME]] @NAMES,
    distinct/name D(libraryScope)/Enum             | error $[Duplicate enum [NAME]] @NAMES,
    distinct/name D(libraryScope)/TypeReferrable   | warning $[Duplicate type [NAME]] @NAMES,
    
    Library{name}        =I=> libraryScope,
    TypeReferrable{name} =I=> libraryScope.
