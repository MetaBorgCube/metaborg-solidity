module analysis/statevariables

imports
  signatures/-

signature
  namespaces
    //StateVar { constant : term }

rules
  [[ StateVariable(solty, mod, name, None()) ^ (s) ]] :=
    [[ solty ^ (s) : tyStateVar ]],
    
    Var{name} <- s,
    Var{name}.origin   := StateVariable(),
    Var{name}.constant := FalseC(),
    Var{name} : tyStateVar !.
    //TODO modifier
  [[ StateVariable(solty, mod, name, Some(exp)) ^ (s) ]] :=
    [[ solty ^ (s) : tyStateVar ]],
    
    Var{name} <- s,
    Var{name}.origin   := StateVariable(),
    Var{name}.constant := FalseC(),
    Var{name} : tyStateVar !,
    
    [[ exp ^ (s)    : tyAssignExp ]],
    tyAssignExp <sub? tyStateVar | error $[Cannot assign expression of type [tyAssignExp] to a variable of type [tyStateVar]] @exp.
    //TODO modifier
  
  [[ ConstantStateVariable(solty, mod, name, None()) ^ (s) ]] :=
    [[ solty ^ (s) : tyStateVar ]],
    
    Var{name} <- s,
    Var{name}.origin   := StateVariable(),
    Var{name}.constant := TrueC(),
    Var{name} : tyStateVar !,
    
    false | warning $[Constants should have initializers!].
    //TODO modifier
    //TODO constant
  [[ ConstantStateVariable(solty, mod, name, Some(exp)) ^ (s) ]] :=
    [[ solty ^ (s) : tyStateVar ]],
    
    Var{name} <- s,
    Var{name}.origin   := StateVariable(),
    Var{name}.constant := TrueC(),
    Var{name} : tyStateVar !,
    
    [[ exp ^ (s)    : tyAssignExp ]],
    tyAssignExp <sub? tyStateVar | error $[Cannot assign expression of type [tyAssignExp] to a variable of type [tyStateVar]] @exp.
    //TODO modifier
    //TODO constant