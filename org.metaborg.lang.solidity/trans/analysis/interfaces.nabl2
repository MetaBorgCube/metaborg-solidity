module analysis/interfaces

imports

  signatures/interfaces-sig
  analysis/types

rules
  [[ c@Interface(name, functions) ^ (programScope) ]] :=
    new interfaceScope,
    interfaceScope -P-> programScope,
    Map1 [[ functions ^ (interfaceScope) ]],
    
    //Define interface and type, also make it referrable
    //Interfaces are treated as contracts by all other components, so we do as well.
    Contract{name}       <- programScope,
    TypeReferrable{name} <- programScope,
    Contract{name}       : interfaceType !,
    TypeReferrable{name} : interfaceType !,
    interfaceType == NamedT(Contract{name}, interfaceScope, InterfaceT()),
    
    //Ensure var subtyping works
    VarT() <sub! interfaceType,

    Contract{name}       =I=> interfaceScope,
    TypeReferrable{name} =I=> interfaceScope.
