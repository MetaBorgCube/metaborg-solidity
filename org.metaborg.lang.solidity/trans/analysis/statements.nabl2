module analysis/statements

imports
  signatures/statements-sig
  signatures/assembly-sig

rules
  //-----------------------------------------------------------------------------------------------
  //Blocks
  [[ Block(stmts) ^ (s) ]] :=
    Map1 [[ stmts ^ (s) ]].

  //-----------------------------------------------------------------------------------------------
  //Control flow
  [[ If(condExp, thenStmt, None()) ^ (s) ]] :=
    [[ condExp  ^ (s) : BoolT() ]],
    [[ thenStmt ^ (s) ]].
    
  [[ If(condExp, thenStmt, Else(elseStmt)) ^ (s) ]] :=
    [[ condExp  ^ (s) : BoolT() ]],
    [[ thenStmt ^ (s) ]],
    [[ elseStmt ^ (s) ]].

  [[ While(condExp, bodyStmt) ^ (s) ]] :=
    [[ condExp  ^ (s) : BoolT() ]],
    [[ bodyStmt ^ (s) ]].
  
  [[ DoWhile(bodyStmt, condExp) ^ (s) ]] :=
    [[ condExp  ^ (s) : BoolT() ]],
    [[ bodyStmt ^ (s) ]].
  
  //For(None/stmt, exp, None/Some(exp), stmt) (only one can be none) (see desugaring)
  [[ For(None(), condExp, Some(loopExp), bodyStmt) ^ (s) ]] :=
    [[ condExp  ^ (s) : BoolT() ]],
    [[ loopExp  ^ (s) : lty]],
    [[ bodyStmt ^ (s) ]].
  
  [[ For(Some(preStmt), condExp, None(), bodyStmt) ^ (s) ]] :=
    [[ preStmt  ^ (s) ]],
    [[ condExp  ^ (s) : BoolT() ]],
    [[ bodyStmt ^ (s) ]].
  
  [[ For(Some(preStmt), condExp, Some(loopExp), bodyStmt) ^ (s) ]] :=
    [[ preStmt  ^ (s) ]],
    [[ condExp  ^ (s) : BoolT() ]],
    [[ loopExp  ^ (s) : lty]],
    [[ bodyStmt ^ (s) ]].
  
  [[ Break()    ^ (s) ]].
  [[ Continue() ^ (s) ]].
  [[ Throw()    ^ (s) ]].

  [[ Emit(ref, args) ^ (s) ]] :=
    ResolveTypeRef [[ ref ^ (s) : tyRef ]],
    Map1T [[ args ^ (s) : tysArgs ]],
    tyRef == NamedT(event, _, tyEvent) | error $[Cannot find an event [ref]],
    tyEvent == EventT(tysParams)       | error $[[ref] is not an event],
    
    tysArgs <sub? tysParams | error $[Argument types [tysArgs] do not match event parameter types [tysParams]].
  
  [[ Emit(call) ^ (s) ]] :=
    false | note $[Failed to desugar emit],
    [[ call ^ (s) : ty ]].
  
  //Return statements in constructor
  [[ VoidReturn() ^ (s) ]].
  [[ ReturnStatement(exp) ^ (s) ]] :=
    [[ exp ^ (s) : actTy ]],
    false | error $[Only "return;" is allowed in constructors!].
  
  //Return statements in function
  [[ VoidReturn(funName) ^ (s) ]] :=
    //Check if corresponding function doesn't have a return type
    Function{funName} -> s,
    Function{funName} |-> fun | error $[Unable to find function corresponding to this return statement. Name: [funName]],
    fun : FunctionT(paramTys, retTy) | warning $[Actual return type (void) does not match expected return type [retTy]!],
    retTy == VoidT() | warning $[Actual return type (void) does not match expected return type [retTy]!].

  [[ ReturnStatement(funName, exp) ^ (s) ]] :=
    [[ exp ^ (s) : expRetTy ]],
    //Check if corresponding function has a matching return type
    Function{funName} -> s,
    Function{funName} |-> fun | error $[Unable to find function corresponding to this return statement. Name: [funName]],
    fun : tyFun,
    tyFun == FunctionT(paramTys, retTy),
    expRetTy <sub? retTy | warning $[Actual return type [expRetTy] does not match expected return type [retTy]].
  
  //-----------------------------------------------------------------------------------------------
  //Variable declarations
  [[ DeclareVar(stype, mod, name) ^ (s) ]] :=
    [[ stype ^ (s) : tyVarDecl ]],
    [[ mod   ^ (s) ]],
    Var{name} <- s,
    Var{name}.origin := Local(),
    Var{name} : tyVarDecl !.
  
  [[ DeclareVarAssign(stype, mod, name, exp) ^ (s) ]] :=
    [[ stype ^ (s) : tyVarDecl ]],
    [[ exp   ^ (s) : tyVarInit ]],
    [[ mod   ^ (s) ]],
    tyVarInit <sub? tyVarDecl | error $[Initializer type [tyVarInit] does not match defined type [tyVarDecl]] @exp,
    
    Var{name} <- s,
    Var{name}.origin := Local(),
    Var{name} : tyVarDecl !.
  
  [[ DeclareVarVar(name, exp) ^ (s) ]] :=
    [[ exp ^ (s) : tyVarInit ]],
    
    Var{name} <- s,
    Var{name}.origin := Local(),
    Var{name} : tyVarInit !.
  
  [[ DeclareVarVar(name) ^ (s) ]] :=
    //Because we have unification, we actually could support this partially.
    Var{name} <- s,
    Var{name}.origin := Local(),
    Var{name} : tyVarVar !,
    false | error $[Assignment is required when using var!].
  
  //-----------------------------------------------------------------------------------------------
  //Tuples
  [[ DeclareTupleVarAssign(names, exp) ^ (s) ]] :=
    [[ exp   ^ (s) : tyVarInit ]],
    Map1T(DeclareTuple) [[ names ^ (s) : tupleTypes ]],
    tyVarInit == TupleT(tupleTypes).
  
  DeclareTuple [[ TupleName(Some(name)) ^ (s) : tupleTy ]] :=
    Var{name} <- s,
    Var{name}.origin := Local(),
    Var{name} : tupleTy !.
    
  DeclareTuple [[ TupleName(None()) ^ (s) : tupleTy ]].

  //-----------------------------------------------------------------------------------------------
  //Expression statements
  [[ ExpStmt(exp) ^ (s) ]] :=
    [[ exp ^ (s) : ty ]].

  //-----------------------------------------------------------------------------------------------
  //Inline assembly
  [[ Assembly(_) ^ (s) ]] :=
    false | note $[Inline assembly is not checked].
  
  //-----------------------------------------------------------------------------------------------
  //Underscore statements
  //Underscore statements are allowed anywhere in a function modifier.
  [[ Underscore() ^ (s) ]].
  
  //-----------------------------------------------------------------------------------------------
  //Dead code
  [[ DeadStatement(stmt) ^ (s) ]] :=
    [[ stmt ^ (s) ]],
    false | warning $[Dead code].
