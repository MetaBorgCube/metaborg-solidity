module analysis/types

imports
  desugar/functions
  signatures/types-sig

signature
  sorts
    Type
  
  constructors
    //Numeric types
    IntT         : INT -> Type
    UIntT        : INT -> Type
    FixedT       : INT * INT -> Type
    UFixedT      : INT * INT -> Type
    
    //More general types for constants
    NrT          : INT * INT -> Type
    FractT       : INT * INT * INT * INT -> Type
    StringLitT   : INT -> Type
    
    //"Simple" types
    BoolT        : Type
    AddressT     : scope -> Type
    StringT      : Type
    
    //Array types
    FBytesT      : INT * scope -> Type
    DBytesT      : scope -> Type
    FArrayT      : Type * string * scope -> Type
    DArrayT      : Type * scope -> Type
    
    //Function types
    FunctionT    : list(Type) * Type -> Type
    FunctionModT : list(Type) -> Type
    
    //Complex types
    MappingT     : Type * Type -> Type
    TupleT       : list(Type) -> Type
    NamedT       : occurrence * scope * Type -> Type

    //Type kinds
    EnumT        : Type
    EventT       : list(Type) -> Type
    StructT      : Type
    ContractT    : Type
    InterfaceT   : Type
    LibraryT     : Type
    BuiltInT     : Type
    ImportT      : Type
    
    //Special types
    VarT         : Type
    AnyT         : Type
    VoidT        : Type
    PackedT      : Type
    
    //---------------------------------------------------------------------------------------------
    //Simplified types
    IntTS        : Type
    UIntTS       : Type
    FixedTS      : Type
    UFixedTS     : Type
    
    AddressTS    : Type
    
    FBytesTS     : Type
    DBytesTS     : Type
    FArrayTS     : Type
    DArrayTS     : Type
    StringTS     : Type
    
    NamedTS      : Type
    MappingTS    : Type
    FunctionTS   : Type
    
    InvalidType  : Type

  namespaces
    //Something that can be referenced as a type.
    TypeReferrable { origin : occurrence }

rules
  //-----------------------------------------------------------------------------------------------
  //Helper functions
  GetAddressType [[ _ ^ (s) : tyAddress ]] :=
    BuiltInType{"address"} -> s,
    BuiltInType{"address"} |-> address,
    address ?===> addressScope,
    tyAddress == AddressT(addressScope).
  
  //-----------------------------------------------------------------------------------------------
  //Simple types
  [[ BooleanType() ^ (s)   : BoolT()   ]].
  [[ StringType()  ^ (s)   : StringT() ]].
  [[ a@AddressType() ^ (s) : tyAddress ]] :=
    GetAddressType [[ a ^ (s) : tyAddress ]].

  //-----------------------------------------------------------------------------------------------
  //Numbers
  [[ IntType(x)  ^ (s) : tyInt  ]] := tyInt == IntT(x).
  [[ UIntType(x) ^ (s) : tyUInt ]] := tyUInt == UIntT(x).
  [[ FixedType(MxN(m, n))  ^ (s) : tyFixed  ]] := tyFixed == FixedT(m, n), VarT() <sub! tyFixed.
  [[ UFixedType(MxN(m, n)) ^ (s) : tyUFixed ]] := tyUFixed == UFixedT(m, n), VarT() <sub! tyUFixed.
  
  //-----------------------------------------------------------------------------------------------
  //Byte arrays
  [[ FixedBytesArrayType(x)  ^ (s) : tyFBytes ]] :=
    BuiltInType{"farray"} -> s,
    BuiltInType{"farray"} |-> farray,
    farray ?===> farrayScope,
    tyFBytes == FBytesT(x, farrayScope).
  [[ DynamicBytesArrayType() ^ (s) : tyDBytes ]] :=
    BuiltInType{"darray"} -> s,
    BuiltInType{"darray"} |-> darray,
    darray ?===> darrayScope,
    tyDBytes == DBytesT(darrayScope).
  
  //-----------------------------------------------------------------------------------------------
  //Arrays
  [[ FixedArrayType(base, sizeExp) ^ (s) : tyFArray ]] :=
    [[ base    ^ (s) : tyBase ]],
    [[ sizeExp ^ (s) : tySize ]],
    
    BuiltInType{"farray"} -> s,
    BuiltInType{"farray"} |-> farray,
    farray ?===> farrayScope,
    BuiltInType{"darray"} -> s,
    BuiltInType{"darray"} |-> darray,
    darray ?===> darrayScope,
    
    //Check if the size is an unsigned integer
    tySizeReal is sub.lub of (tySize, UIntT(256)) | error $[Size must be an unsigned integer] @sizeExp,
    UIntTS() is simplifyType of tySizeReal        | error $[Size must be an unsigned integer] @sizeExp,
    
    //Determine the size from the expression
    size is getLiteralInt of sizeExp | error $[Array size must be a constant integer literal] @sizeExp,
    tyFArray == FArrayT(tyBase, size, farrayScope),
    
    //Ensure that casting and var subtyping works.
    tyDArray == DArrayT(tyBase, darrayScope),
    tyFArray <cast! tyDArray,
    
    VarT()   <sub! tyFArray,
    VarT()   <sub! tyDArray.
  
  [[ DynamicArrayType(base) ^ (s) : tyDArray ]] :=
    [[ base ^ (s) : tyBase ]],
    
    BuiltInType{"darray"} -> s,
    BuiltInType{"darray"} |-> darray,
    darray ?===> darrayScope,
    
    tyDArray == DArrayT(tyBase, darrayScope),
    VarT() <sub! tyDArray.
  
  //-----------------------------------------------------------------------------------------------
  //Functions
  [[ FunctionType(args, vis, stateMut, retParam) ^ (s) : tyFunT ]] :=
    [[ retParam ^ (s) : tyRet ]],
    [[ vis      ^ (s) ]],
    [[ stateMut ^ (s) ]],
    Map1T [[ args ^ (s) : tysArgs ]],

    tyFunT == FunctionT(tysArgs, tyRet),
    VarT() <sub! tyFunT.
  
  //Void type is added to fix return type problems
  [[ VoidType() ^ (s) : VoidT() ]].
  
  //Tuple type is used to wrap return types
  [[ TupleType(params) ^ (s) : TupleT(tys) ]] :=
    Map1T [[ params ^ (s) : tys ]].
  
  //-----------------------------------------------------------------------------------------------
  //Mappings
  [[ MappingType(key, value) ^ (s) : tyMapping ]] :=
    [[ key   ^ (s) : tyKey   ]],
    [[ value ^ (s) : tyValue ]],
    tyMapping == MappingT(tyKey, tyValue),
    VarT() <sub! tyMapping.

  //-----------------------------------------------------------------------------------------------
  //User defined types
  [[ UserDefinedType(x) ^ (s) : tyUDef ]] :=
    TypeReferrable{x} -> s,
    TypeReferrable{x} |-> ref | error $[Cannot find any type [x]] @x,
    ref : tyUDef.
  
  //------------------------------------------------------------------------------------------------
  [[ Var() ^ (s) : VarT() ]].
  