module functions

imports
  Common
  types
  modifiers
  expressions
  statements

template options
  tokenize : "({;"
  keyword -/- [a-zA-Z0-9]

lexical syntax
  //Define as keyword
  KEYWORD = FUNKEYWORD
  FUNKEYWORD = "function"
  FUNKEYWORD = "constructor"
  FUNKEYWORD = "returns"
  ID = FUNKEYWORD {reject}

context-free start-symbols
  Function
  AbstractFunction
  Constructor
  Param
  Returns

context-free syntax
  //---------------------------------------------------------------------------
  //Function declarations
  Function.Function = <
    function <ID>(<{Param ", "}*>) <ModifiersFun*> <Returns> {
      <{Statement "\n"}*>
    }>
  
  Function.VoidFunction = <
    function <ID>(<{Param ", "}*>) <ModifiersFun*> {
      <{Statement "\n"}*>
    }>
  
  //Fallback function has no name, no parameters and no returns.
  Function.FallBackFunction = <
    function() <ModifiersFun*> {
      <{Statement "\n"}*>
    }>
  
  //---------------------------------------------------------------------------
  //Abstract functions
  Function = AbstractFunction
  
  AbstractFunction.AbstractFunction = <function <ID>(<{Param ", "}*>) <ModifiersFun*> <Returns?>;>
  
  //---------------------------------------------------------------------------
  //Constructors
  Constructor.Constructor = <
    constructor(<{Param ", "}*>) <ModifierCon?> {
      <{Statement "\n"}*>
    }>
  
  Constructor.ConstructorWithSuper = <
    constructor(<{Param ", "}*>) <ModifierCon?> <ModifierConSuper> <ModifierCon?> {
      <{Statement "\n"}*>
    }>
  
  //---------------------------------------------------------------------------
  //Params
  Param.Param             = <<Type> <ModLocation?> <ParamName?>>
  ReturnParam.ReturnParam = <<Type> <ModLocation?> <ParamName?>>
  
  ParamName               = ID
  
  //Return Params
  Returns.Returns = <returns (<{ReturnParam ", "}+>)>
  
  //---------------------------------------------------------------------------
  //Modifiers
  ModifiersFun = ModVisibility
  ModifiersFun = ModStateMutability
  ModifiersFun.UserDefined = <<ModUserDefined>>
  
  ModUserDefined.SimpleUMod = <<ID>>
  ModUserDefined.ExtUMod    = <<ID>(<{Exp ", "}*>)>
  
  //Constructors can be internal or public
  ModifierCon = ModVisibilityInternal
  ModifierCon = ModVisibilityPublic
  
  //Calls to base constructors can be done with modifier like syntax
  ModifierConSuper.ModSuperCall = <<ID>(<{Exp ", "}*>)>
  