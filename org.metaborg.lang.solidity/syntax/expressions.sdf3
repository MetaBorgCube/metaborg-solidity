module expressions

imports
  
  Common
  types
  tuples

template options
  tokenize : "({["
  keyword -/- [a-zA-Z0-9]

lexical syntax
  //Define as keyword
  KEYWORD = EXPKEYWORD
  EXPKEYWORD = "true"
  EXPKEYWORD = "false"
  EXPKEYWORD = "this"
  EXPKEYWORD = "new"
  EXPKEYWORD = "delete"
  ID = EXPKEYWORD {reject}

sorts
  Exp

context-free start-symbols
  Exp
  
context-free syntax
  Exp = < (<Exp>) > {bracket}

  //---------------------------------------------------------------------------
  //Numeric operators
  Exp.UMin   = < -<Exp> >         {right}
  Exp.UPlus  = < +<Exp> >         {right}
  Exp.Add    = < <Exp> + <Exp> >  {left}
  Exp.Sub    = < <Exp> - <Exp> >  {left}
  Exp.Mul    = < <Exp> * <Exp> >  {left}
  Exp.Div    = < <Exp> / <Exp> >  {left}
  Exp.Mod    = < <Exp> % <Exp> >  {left}
  Exp.Pow    = < <Exp> ** <Exp> > {left}
  Exp.LShift = [ [Exp] << [Exp] ] {left}
  Exp.RShift = [ [Exp] >> [Exp] ] {left}
  Exp.BitAnd = < <Exp> & <Exp> >  {left}
  Exp.BitOr  = < <Exp> | <Exp> >  {left}
  Exp.BitXor = < <Exp> ^ <Exp> >  {left}
  Exp.BitNot = < ~<Exp> >         {right}
  
  //---------------------------------------------------------------------------
  //Increment and decrement
  Exp.RetInc = < <Ref>++ > {left}
  Exp.RetDec = < <Ref>-- > {left}
  Exp.IncRet = < ++<Ref> > {right}
  Exp.DecRet = < --<Ref> > {right}
  
  //---------------------------------------------------------------------------
  //Comparison
  Exp.Lt     = [ [Exp] < [Exp] ]  {non-assoc}
  Exp.LtEq   = [ [Exp] <= [Exp] ] {non-assoc}
  Exp.Gt     = [ [Exp] > [Exp] ]  {non-assoc}
  Exp.GtEq   = [ [Exp] >= [Exp] ] {non-assoc}
  Exp.Eq     = < <Exp> == <Exp> > {non-assoc}
  Exp.NEq    = < <Exp> != <Exp> > {non-assoc}
  
  //---------------------------------------------------------------------------
  //Boolean logic
  Exp.And    = < <Exp> && <Exp> > {left}
  Exp.Or     = < <Exp> || <Exp> > {left}
  Exp.Not    = < !<Exp> >         {right}
  
  //---------------------------------------------------------------------------
  //Arrays
  AlsoExp             = Exp
  Subscript.Subscript = < <Exp>[<AlsoExp>] > {left}
  
  //---------------------------------------------------------------------------
  //Function calls
  Exp.Call   = FunctionCall
  FunctionCall.FunctionCall = < <Exp>(<{AlsoExp ", "}*>) > {left}
  
  //---------------------------------------------------------------------------
  //Literals
  Exp.NumberLit = <<NUMBER> <NumberUnit?>>
  Exp.HexLit    = <<HEXSTRING>>
  Exp.StringLit = <<STRING>>
  Exp.True      = <true>
  Exp.False     = <false>
  Exp.This      = <this>
  Exp.LitArray  = < [<{Exp ", "}+>] >
  Exp           = Ref
  
  //Reference can be a variable, a subscript access or some expression followed
  //by a reference.
  Ref.IdRef        = ID
  Ref              = Subscript
  Ref.MemberRef    = <<Exp>.<Ref>> {right}
  
  //---------------------------------------------------------------------------
  //Create and delete
  Exp.NewObject = <new <PATH>(<{Exp ", "}*>)> {prefer}
  Exp.NewArray  = <new <Type>(<Exp>)>
  Exp.NewStruct = <<UserDefinedType>({<{StructAssign ", "}+>})>
  Exp.Delete    = <delete <Exp>> {right}
  
  StructAssign.StructAssign = <<ID>: <Exp>>
  
  //---------------------------------------------------------------------------
  //Cast
  Exp.Cast = < <SimpleCastType>(<AlsoExp>) >
  
  //---------------------------------------------------------------------------
  //Tenary if statement
  Exp.Ternary = < <Exp> ? <AlsoExp> : <AlsoExp> > {right}
  
  //-----------------------------------------------------------------
  //Assignment
  Exp.Assign      = <<Ref> = <Exp>>                 {right}
  Exp.AssignTuple = <(<{TupleName ", "}*>) = <Exp>> {avoid}
  
  //-----------------------------------------------------------------
  //LValue shorthands
  LVal.AddAssign    = < <Ref> += <Exp> >  {right}
  LVal.SubAssign    = < <Ref> -= <Exp> >  {right}
  LVal.MulAssign    = < <Ref> *= <Exp> >  {right}
  LVal.DivAssign    = < <Ref> /= <Exp> >  {right}
  LVal.ModAssign    = < <Ref> %= <Exp> >  {right}
  
  LVal.BitOrAssign  = < <Ref> |= <Exp> >  {right}
  LVal.BitAndAssign = < <Ref> &= <Exp> >  {right}
  LVal.BitXorAssign = < <Ref> ^= <Exp> >  {right}
  
  LVal.LShiftAssign = [ [Ref] <<= [Exp] ] {right}
  LVal.RShiftAssign = [ [Ref] >>= [Exp] ] {right}
  
  Exp.LValAssign    = LVal
  
context-free priorities
  {
    Exp.RetInc Exp.RetDec
    Exp.NewObject
    Subscript.Subscript
    Ref.IdRef
    Ref.MemberRef
    Exp.Cast
    FunctionCall.FunctionCall} >
  {right:
    Exp.IncRet Exp.DecRet
    Exp.UMin Exp.UPlus
    Exp.Delete
    Exp.Not Exp.BitNot} >
  {left: Exp.Pow} >
  {left: Exp.Mul    Exp.Div    Exp.Mod} >
  {left: Exp.Add    Exp.Sub} >
  {left: Exp.LShift Exp.RShift} >
  {left: Exp.BitAnd} >
  {left: Exp.BitXor} >
  {left: Exp.BitOr} >
  {non-assoc: Exp.Lt Exp.Gt Exp.LtEq Exp.GtEq} >
  {non-assoc: Exp.Eq Exp.NEq} >
  {left: Exp.And} >
  {left: Exp.Or} >
  {right: Exp.Ternary} >
  {Exp.Assign Exp.AssignTuple Exp.LValAssign},
  
  {right: Exp.Cast} > {left: FunctionCall.FunctionCall}
