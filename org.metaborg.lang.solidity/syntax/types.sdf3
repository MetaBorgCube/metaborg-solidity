module types

imports
  Common
  modifiers
  expressions

template options
  tokenize : "([;"

context-free start-symbols
  Type
  SimpleType
  ArrayType
  FunctionType
  UserDefinedType
  MappingType

lexical syntax
  //Multiples of 8 up to 256
  Mult8    = "8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176" | "184" | "192" | "200" | "208" | "216" | "224" | "232" | "240" | "248" | "256"
  
  //All numbers from 0 to 80 (inclusive)
  ZeroTo80 = [0-9] | ([1-7][0-9]) | "80"
  
  //Precision for fixed point numbers is MxN where M is a multiple of 8 and N is between 0 and 80
  MxN = Mult8 "x" ZeroTo80
  
  //All numbers from 1 to 32 (inclusive)
  OneTo32 = [1-9] | ([12][0-9]) | ("3" [0-2])
  
  //Define the elementary types as keywords
  KEYWORD = TYPEKEYWORD
  TYPEKEYWORD = "bool"
  TYPEKEYWORD = "int"
  TYPEKEYWORD = "uint"
  TYPEKEYWORD = "fixed"
  TYPEKEYWORD = "ufixed"
  TYPEKEYWORD = "int" Mult8
  TYPEKEYWORD = "uint" Mult8
  TYPEKEYWORD = "fixed" MxN
  TYPEKEYWORD = "ufixed" MxN
  TYPEKEYWORD = "address"
  TYPEKEYWORD = "bytes" OneTo32
  TYPEKEYWORD = "bytes"
  TYPEKEYWORD = "byte"
  TYPEKEYWORD = "string"
  TYPEKEYWORD = "var"
  
  ID = TYPEKEYWORD {reject}

context-free syntax
  //Distinguish between different sorts of types
  Type = SimpleType
  Type = UserDefinedType
  Type = ArrayType
  Type = FunctionType
  Type = MappingType
  
  //Elementary types
  ElementaryType.FixedArray   = <<ElementaryType>[]>
  ElementaryType.DynamicArray = <<ElementaryType>[]>
  ElementaryType              = SimpleType
  ElementaryType              = FAType
  ElementaryType              = DAType
  
  //Simple types
  SimpleType.Boolean = <bool>
  SimpleType.Int     = <int<Mult8?>>
  SimpleType.UInt    = <uint<Mult8?>>
  SimpleType.Fixed   = <fixed<MxN?>>
  SimpleType.UFixed  = <ufixed<MxN?>>
  SimpleType.Address = <address>
  
 //User defined type (enum, struct)
  UserDefinedType.UserDefinedType = PATH
  
  //Array types (FAType = Fixed size array type, DAType = Dynamic sized array type)
  ArrayType                = FAType
  ArrayType                = DAType
  ArrayType.FixedArray     = <<Type>[<Exp>]> //fixed sized arrays
  ArrayType.DynamicArray   = <<Type>[]>       //dynamic sized arrays
  
  FAType.FixedBytesArray   = <bytes<OneTo32>>
  FAType.Byte              = <byte>           //byte = bytes1
  DAType.DynamicBytesArray = <bytes>          //bytes = dynamic sized array of bytes
  DAType.String            = <string>         //string = dynamic sized "array"
  
  //Function type
  FunctionType.FunctionType  = <function (<{Type ", "}*>) <ModVisibilityIntExt?> <ModStateMutability?> <FunReturnsType?>>
  FunReturnsType.ReturnsType = <returns (<{Type ", "}+>)>
  
  //Mapping type
  MappingType.Mapping = <mapping(<MappingKeyType> =\> <Type>)>
  
  //The key of the mapping must be an "elementary type" (any type literal)
  MappingKeyType = SimpleType
  MappingKeyType = FAType
  MappingKeyType = DAType
  
  //Local variables can have their type inferred
  LocalVarType.Var = <var>
  LocalVarType = Type
  