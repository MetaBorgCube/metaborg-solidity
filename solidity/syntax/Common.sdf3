module Common

lexical syntax

  ID             = [a-zA-Z\_] [a-zA-Z0-9\_]* 
  INT            = [0-9]+ 
  STRING         = "\"" StringChar* "\""
  StringChar     = ~[\"\n] 
  StringChar     = "\\\"" 
  StringChar     = BackSlashChar 
  BackSlashChar  = "\\" 
  LAYOUT         = [\ \t\n\r] 
  CommentChar    = [\*] 
  LAYOUT         = "/*" InsideComment* "*/" 
  InsideComment  = ~[\*] 
  InsideComment  = CommentChar 
  LAYOUT         = "//" ~[\n\r]* NewLineEOF 
  NewLineEOF     = [\n\r] 
  NewLineEOF     = EOF 
  EOF            =  
  
  ID = KEYWORD {reject}
  KEYWORD = "abstract"
  KEYWORD = "after"
  KEYWORD = "bool"
  KEYWORD = "case"
  KEYWORD = "catch"
  KEYWORD = "contract"
  KEYWORD = "default"
  KEYWORD = "false"
  KEYWORD = "final"
  KEYWORD = "function"
  KEYWORD = "in"
  KEYWORD = "inline"
  KEYWORD = "int"
  KEYWORD = "let"
  KEYWORD = "match"
  KEYWORD = "null"
  KEYWORD = "of"
  KEYWORD = "pragma"
  KEYWORD = "relocatable"
  KEYWORD = "returns"
  KEYWORD = "static"
  KEYWORD = "switch"
  KEYWORD = "true"
  KEYWORD = "try"
  KEYWORD = "type"
  KEYWORD = "typeof"
  KEYWORD = "anonymous"
  KEYWORD = "break"
  KEYWORD = "constant"
  KEYWORD = "continue"
  KEYWORD = "external"
  KEYWORD = "indexed"
  KEYWORD = "internal"
  KEYWORD = "payable"
  KEYWORD = "private"
  KEYWORD = "public"
  KEYWORD = "pure"
  KEYWORD = "view"
  
lexical restrictions

  // Ensure greedy matching for lexicals
  
  CommentChar   -/- [\/]
  INT           -/- [0-9]
  ID            -/- [a-zA-Z0-9\_]
  
  // EOF may not be followed by any char
  
  EOF           -/- ~[]
  
  // Backslash chars in strings may not be followed by " 
  
  BackSlashChar -/- [\"]

context-free restrictions

  // Ensure greedy matching for comments
  
  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]
