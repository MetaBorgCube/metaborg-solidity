module ebc/ebcshared/codegen

imports
  signatures/ebc/EBC-sig

signature
  constructors
    TAG      : EBCInt * EBCInt -> Instr
    JUMPDEST : EBCInt * EBCInt -> Instr

rules
  //-----------------------------------------------------------------------------------------------
  //Hex util methods
  //-----------------------------------------------------------------------------------------------
  /**
   * Converts an int to a hexidecimal string (without 0x).
   */
  int-to-hex: n -> h
    where
    (
      (<lt> (n, 10); h := <int-to-string> n) <+
      (<eq> (n, 10); h := "a") <+
      (<eq> (n, 11); h := "b") <+
      (<eq> (n, 12); h := "c") <+
      (<eq> (n, 13); h := "d") <+
      (<eq> (n, 14); h := "e") <+
      (<eq> (n, 15); h := "f") <+
      (h := <conc-strings> (<int-to-hex> <divi> (n, 16), <int-to-hex> <mod> (n, 16)))
    )
  
  /**
   * Fixes the length of the given hex string (no 0x).
   * 
   * E.g:
   *  0   -> 00
   *  123 -> 0123
   */
  fix-hex-length: s -> s'
    where
    //if (|s| % 2 == 0) then s' := s else s' := "0" . s
    (<eq> (<mod> (<strlen> s, 2), 0); s' := s) <+
    (s' := <conc-strings> ("0", s))
  
  /**
   * Fixes the length of the given hex string to the given length.
   *
   * @param int    - the intended length of s
   * @param string - the hex string to lengthen
   */
  fix-hex-length(|n): s -> s'
    where
    diff := (<subti> (n, <strlen> s));
    (
      //if (n == |s|) s' := s else if (n > |s|) s' := fix-hex-length(|n) "0" . s
      (<eq> (diff, 0); s' := s) <+
      (<gt> (diff, 0); s' := <fix-hex-length(|n)> <conc-strings> ("0", s))
    )
    
  /**
   * Prepends 0x and ensures that the given hex string is of the correct length (0 -> 0x00).
   */
  finish-hex: s -> s'
    where
      //if (|s| % 2 == 0) then s' := "0x" . s else s' := "0x0" . s
      (<eq> (<mod> (<strlen> s, 2), 0); s' := <conc-strings> ("0x", s)) <+
      (s' := <conc-strings> ("0x0", s))
  
  //-----------------------------------------------------------------------------------------------
  //Tags
  //-----------------------------------------------------------------------------------------------
  /**
   * Resolves all PUSHTAG instructions by replacing them with PUSH(2, tag location).
   * 
   * This strategy fails if some tags cannot be resolved.
   *
   * @param list(Instr)  - the list of instructions
   * @return list(Instr) - the list of instructions with PUSHTAGs replaced 
   */
  resolve-pushtags: instructions -> instructions'
    where
    indexed-tags := <index-tags(|0)> instructions;
    instructions' := <map(\ i -> <convert-tag> (i, indexed-tags) \)> instructions
  
  /**
   * Indexes the locations of the tags.
   *
   * @param int          - current index
   * @param list(Instr)  - the list of instructions
   * @return list(TAG/2) - a list with only the tags and locations
   */
  index-tags(|index): []                    -> []
  index-tags(|index): [TAG(x)      | tail] -> [TAG(x, index) | <index-tags(|<inc> index)> tail]
  index-tags(|index): [JUMPDEST(x) | tail] -> [TAG(x, index) | <index-tags(|<inc> index)> tail]
  index-tags(|index): [PUSH(n, _)  | tail] -> <index-tags(|<inc> <addi> (index, <string-to-int> n))> tail
  index-tags(|index): [PUSHTAG(_)  | tail] -> <index-tags(|<addi> (index, 3))> tail
  index-tags(|index): [head | tail]        -> <index-tags(|<inc> index)> tail
    where
    not(<?TAG(_) + ?JUMPDEST(_) + ?PUSH(_, _) + ?PUSHTAG(_)> head)
  
  /**
   * Takes a tuple of (Instr, list(TAG(name, index))).
   * Converts PUSHTAG(x) to PUSH("2", location).
   * Leaves all other instructions unchanged.
   *
   * @param Instr
   * @param list(TAG/2)
   * @return Instr
   */
  convert-tag: (PUSHTAG(x), tags) -> PUSH("2", <conc-strings> ("0x", <fix-hex-length(|4)> <int-to-hex> <get-tag-index> (x, tags)))
  convert-tag: (i, _)             -> i
    where
    not(<?PUSHTAG(_)> i)
  
  /**
   * Determines the index of the tag with the given name.
   *
   * @param string      - tag name
   * @param list(TAG/2) - list of tags and indices
   * @return int        - tag index
   */
  get-tag-index: (x, [TAG(y, index) | _]) -> index where <string-starts-with(|x)> y; <string-starts-with(|y)> x
  get-tag-index: (x, [_ | tail])          -> <get-tag-index> (x, tail)
  get-tag-index: (x, [])                  -> <fail>
  //-----------------------------------------------------------------------------------------------
  //Instructions to hex
  //-----------------------------------------------------------------------------------------------
  
   /**
   * Converts a list of ebc instructions to a hexadecimal string.
   */
  ebc-to-hex-string: EBCFile(_, _, Code(instructions)) -> <ebc-to-hex-string> instructions
  ebc-to-hex-string: instructions@[_ | _] -> hex
    where
    hexinstructions := <map(instr-to-hex)> <resolve-pushtags> instructions;
    hexstring := <concat-strings> hexinstructions;
    hex := <conc-strings> ("0x", hexstring)
  
  instr-to-hex: STOP()         -> "00"
  instr-to-hex: ADD()          -> "01"
  instr-to-hex: MUL()          -> "02"
  instr-to-hex: SUB()          -> "03"
  instr-to-hex: DIV()          -> "04"
  instr-to-hex: SDIV()         -> "05"
  instr-to-hex: MOD()          -> "06"
  instr-to-hex: SMOD()         -> "07"
  instr-to-hex: ADDMOD()       -> "08"
  instr-to-hex: MULMOD()       -> "09"
  instr-to-hex: EXP()          -> "0a"
  instr-to-hex: SIGNEXTEND()   -> "0b"


  instr-to-hex: LT()           -> "10"
  instr-to-hex: GT()           -> "11"
  instr-to-hex: SLT()          -> "12"
  instr-to-hex: SGT()          -> "13"
  instr-to-hex: EQ()           -> "14"
  instr-to-hex: ISZERO()       -> "15"
  instr-to-hex: AND()          -> "16"
  instr-to-hex: OR()           -> "17"
  instr-to-hex: XOR()          -> "18"
  instr-to-hex: NOT()          -> "19"
  instr-to-hex: BYTE()         -> "1a"
  instr-to-hex: SHL()          -> "1b"
  instr-to-hex: SHR()          -> "1c"
  instr-to-hex: SAR()          -> "1d"

  instr-to-hex: SHA3()         -> "20"

  instr-to-hex: ADDRESS()      -> "30"
  instr-to-hex: BALANCE()      -> "31"
  instr-to-hex: ORIGIN()       -> "32"
  instr-to-hex: CALLER()       -> "33"
  instr-to-hex: CALLVALUE()    -> "34"
  instr-to-hex: CALLDATALOAD() -> "35"
  instr-to-hex: CALLDATASIZE() -> "36"
  instr-to-hex: CALLDATACOPY() -> "37"
  instr-to-hex: CODESIZE()     -> "38"
  instr-to-hex: CODECOPY()     -> "39"
  instr-to-hex: GASPRICE()     -> "3a"
  instr-to-hex: EXTCODESIZE()  -> "3b"
  instr-to-hex: EXTCODECOPY()  -> "3c"
  
  instr-to-hex: RETURNDATASIZE() -> "3d"
  instr-to-hex: RETURNDATACOPY() -> "3e"

  instr-to-hex: BLOCKHASH()    -> "40"
  instr-to-hex: COINBASE()     -> "41"
  instr-to-hex: TIMESTAMP()    -> "42"
  instr-to-hex: NUMBER()       -> "43"
  instr-to-hex: DIFFICULTY()   -> "44"
  instr-to-hex: GASLIMIT()     -> "45"

  instr-to-hex: POP()          -> "50"
  instr-to-hex: MLOAD()        -> "51"
  instr-to-hex: MSTORE()       -> "52"
  instr-to-hex: MSTORE8()      -> "53"
  instr-to-hex: SLOAD()        -> "54"
  instr-to-hex: SSTORE()       -> "55"
  instr-to-hex: JUMP()         -> "56"
  instr-to-hex: JUMPI()        -> "57"
  instr-to-hex: PC()           -> "58"
  instr-to-hex: MSIZE()        -> "59"
  instr-to-hex: GAS()          -> "5a"
  instr-to-hex: JUMPDEST()     -> "5b"
  instr-to-hex: JUMPDEST(_)    -> "5b"

  instr-to-hex: PUSH(n, nr) -> s
    where
    ((<is-string> n; n' := <string-to-int> n) <+ (n' := n));
    ((<is-string> nr; hexstr := <fix-hex-length> <string-replace(|"0x","")> nr) <+ (hexstr := <fix-hex-length> <int-to-hex> nr) <+ (hexstr := nr));
    opcode := <int-to-hex> <addi> (95, n');
    s      := <conc-strings> (opcode, <lower-case> hexstr)
  instr-to-hex: PUSHI(n, nr) -> s
    where
    ((<is-string> n; n' := <string-to-int> n) <+ (n' := n));
    ((<is-string> nr; nr' := <string-to-int> nr) <+ (nr' := nr));
    opcode := <int-to-hex> <addi> (95, n');
    s      := <conc-strings> (opcode, <lower-case> <fix-hex-length> <int-to-hex> nr')

  instr-to-hex: DUP(n) -> opcode
    where
    (n' := <string-to-int> n <+ n' := n);
    opcode := <int-to-hex> <addi> (127, n')

  instr-to-hex: SWAP(n) -> opcode
    where
    (n' := <string-to-int> n <+ n' := n);
    opcode := <int-to-hex> <addi> (143, n')
    

  instr-to-hex: LOG(n) -> opcode
    where
    (n' := <int-to-string> n <+ n' := n);
    opcode := <conc-strings> ("a", n')

  instr-to-hex: CREATE()       -> "f0"
  instr-to-hex: CALL()         -> "f1"
  instr-to-hex: CALLCODE()     -> "f2"
  instr-to-hex: RETURN()       -> "f3"
  instr-to-hex: DELEGATECALL() -> "f4"
  
  instr-to-hex: STATICCALL()   -> "fa"
  
  instr-to-hex: REVERT()       -> "fd"
  instr-to-hex: INVALID()      -> "fe"
  instr-to-hex: SELFDESTRUCT() -> "ff"
  
  instr-to-hex: TAG(_)         -> ""
  